cmdhistory=["(pprint data)" "(use '(incanter core stats charts io))" "my-robot" "(my-robot)" "(view (cm/fetch-dataset \:beer-data))" "<type clojure code here>" "(sq 5)" "my-beer" "beer-data" "(beer-data)" "beer-data" "1" "(.stop server)" "(.start server)" "(.stop server)" "(.start server)" "<type clojure code here>" "(.stop server)" "(.start server)" "server" "(server)" "(beer-routes)" "(jetty/stop server)" "fetch-data-for-user" "(count fetch-data-for-user)" "fetch-data-for-user" "(count fetch-data-for-user)" "fetch-data-for-user" "data" "(data)" "datab" "(datab)" "d" "(d)" "d" "(d)" "(daa)" "daa" "dasda" "(def dasda (into {} ({\:one 1} {\:two 2} {\:three 3})))" "dasda" "(\= ({\:one 1} {\:two 2} {\:three 3}) dasda)" "dasda" "(def dasda (into {} ({\\"one\\" 1} {\\"two\\" 2} {\\"three\\" 3})))" "dasda" "daa" "(daa \\"stcules\\")" "(vals (daa \\"stcules\\"))" "(into {} (vals (daa \\"stcules\\")))" "(daa \\"stcules\\")" "(keys (daa \\"stcules\\"))" "(vals (daa \\"stcules\\"))" "(def critics \\r\\n  {\\"Lisa Rose\\" {\\"Lady in the Water\\" 2.5 \\"Snakes on a Plane\\" 3.5\\r\\n                \\"Just My Luck\\" 3.0 \\"Superman Returns\\" 3.5\\r\\n                \\"You, Me and Dupree\\" 2.5 \\"The Night Listener\\" 3.0}\\r\\n   \\"Gene Seymour\\" {\\"Lady in the Water\\" 3.0 \\"Snakes on a Plane\\" 3.5\\r\\n                   \\"Just My Luck\\" 1.5  \\"Superman Returns\\" 5.0 \\r\\n                   \\"The Night Listener\\" 3.0 \\"You, Me and Dupree\\" 3.5}\\r\\n   \\"Michael Phillips\\" {\\"Lady in the Water\\" 2.5 \\"Snakes on a Plane\\" 3.0\\r\\n                       \\"Superman Returns\\" 3.5  \\"The Night Listener\\" 4.0}\\r\\n   \\"Claudia Puig\\" {\\"Snakes on a Plane\\" 3.5 \\"Just My Luck\\" 3.0\\r\\n                   \\"The Night Listener\\" 4.5 \\"Superman Returns\\" 4.0\\r\\n                   \\"You, Me and Dupree\\" 2.5}\\r\\n   \\"Mick LaSalle\\" {\\"Lady in the Water\\" 3.0 \\"Snakes on a Plane\\" 4.0\\r\\n                   \\"Just My Luck\\" 2.0 \\"Superman Returns\\" 3.0\\r\\n                   \\"The Night Listener\\" 3.0 \\"You, Me and Dupree\\" 2.0}, \\r\\n   \\"Jack Matthews\\" {\\"Lady in the Water\\" 3.0 \\"Snakes on a Plane\\" 4.0\\r\\n                    \\"The Night Listener\\" 3.0 \\"Superman Returns\\" 5.0 \\r\\n                    \\"You, Me and Dupree\\" 3.5}\\r\\n   \\"Toby\\" {\\"Snakes on a Plane\\" 4.5 \\"You, Me and Dupree\\" 1.0\\r\\n           \\"Superman Returns\\" 4.0}})" "(def critics \\r\\n  {\\"Lisa Rose\\" {\\"Lady in the Water\\" 2.5 \\"Snakes on a Plane\\" 3.5\\r\\n                \\"Just My Luck\\" 3.0 \\"Superman Returns\\" 3.5\\r\\n                \\"You, Me and Dupree\\" 2.5 \\"The Night Listener\\" 3.0}\\r\\n   \\"Gene Seymour\\" {\\"Lady in the Water\\" 3.0 \\"Snakes on a Plane\\" 3.5\\r\\n                   \\"Just My Luck\\" 1.5  \\"Superman Returns\\" 5.0 \\r\\n                   \\"The Night Listener\\" 3.0 \\"You, Me and Dupree\\" 3.5}\\r\\n   \\"Michael Phillips\\" {\\"Lady in the Water\\" 2.5 \\"Snakes on a Plane\\" 3.0\\r\\n                       \\"Superman Returns\\" 3.5  \\"The Night Listener\\" 4.0}\\r\\n   \\"Claudia Puig\\" {\\"Snakes on a Plane\\" 3.5 \\"Just My Luck\\" 3.0\\r\\n                   \\"The Night Listener\\" 4.5 \\"Superman Returns\\" 4.0\\r\\n                   \\"You, Me and Dupree\\" 2.5}\\r\\n   \\"Mick LaSalle\\" {\\"Lady in the Water\\" 3.0 \\"Snakes on a Plane\\" 4.0\\r\\n                   \\"Just My Luck\\" 2.0 \\"Superman Returns\\" 3.0\\r\\n                   \\"The Night Listener\\" 3.0 \\"You, Me and Dupree\\" 2.0}, \\r\\n   \\"Jack Matthews\\" {\\"Lady in the Water\\" 3.0 \\"Snakes on a Plane\\" 4.0\\r\\n                    \\"The Night Listener\\" 3.0 \\"Superman Returns\\" 5.0 \\r\\n                    \\"You, Me and Dupree\\" 3.5}\\r\\n   \\"Toby\\" {\\"Snakes on a Plane\\" 4.5 \\"You, Me and Dupree\\" 3.0\\r\\n           \\"Superman Returns\\" 4.0}})" "(keys daa)" "(def datab (cm/fetch \:beer_data \:only \\r\\n            {\:_id false \:review_profileName true \:beer_name true \:review_overall true} ))" "(def datab (cm/fetch \:beer_data \:only \\r\\n            {\:_id false \:review_profileName true \:beer_name true \:review_overall true} ))<type clojure code here>" "(def datab (cm/fetch \:beer_data \:only \\r\\n            {\:_id false \:review_profileName true \:beer_name true \:review_overall true} ))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(keys datab)" "datab" "(daa \\"stcules\\")" "(keys (daa \\"stcules\\"))" "datab" "(defn euclidean-distance [person1 person2]\\r\\n  (let [shared-items (filter person1 (keys person2))\\r\\n        score (reduce (fn[mark beer]\\r\\n                        (let [mark1 (person1 beer)\\r\\n                              mark2 (person2 beer)]\\r\\n                          (+ mark (Math/pow (- mark1 mark2) 2))))\\r\\n                      0 shared-items)]\\r\\n    (if (\= (count shared-items) 0)\\r\\n      0\\r\\n      (/ 1 (+ 1 mark)))))" "(get-all-reviews)" "(allusers)" "(get-reviews-by-user-cs)" "(get-reviews-by-user-cs \\"MadeInOregon\\")" "(get-reviews-by-user \\"MadeInOregon\\")" "(get-reviews-by-user-cs \\"MadeInOregon\\" \\"Caldera Ginger Beer\\")" "allusers" "(get-all-reviews)" "get-all-reviews" "(get-all-reviews)" "(take 1 allusers)" "(count (take 1 allusers))" "(count (flatten (take 1 allusers)))" "<type clojure code here>" "(flatten (take 1 allusers))" "(count (flatten (get-all-reviews)))" "(flatten (get-all-reviews))" "(count get-all-reviews)" "(count (get-all-reviews))" "(flatten (get-all-reviews))" "(flatten (map vals(get-all-reviews)))" "(get-reviews-by-user \\"stcules\\")" "(count (get-reviews-by-user \\"stcules\\"))" "(get-all-reviews)" "(count (get-all-reviews))" "(assoc \\"aca\\" {1 2 3})" "(assoc \\"aca\\" {\\"aa\\" 2 \\"a\\" 3})" "(hash-map \\"aca\\" {\\"aa\\" 2 \\"a\\" 3})" "(apply hash-map \\"aca\\" {\\"aa\\" 2 \\"a\\" 3})" "(get-all-reviews)" "(critics \\"Lisa Rose\\")" "(def critics \\r\\n  {\\"Lisa Rose\\" {\\"Lady in the Water\\" 2.5 \\"Snakes on a Plane\\" 3.5\\r\\n                \\"Just My Luck\\" 3.0 \\"Superman Returns\\" 3.5\\r\\n                \\"You, Me and Dupree\\" 2.5 \\"The Night Listener\\" 3.0}\\r\\n   \\"Gene Seymour\\" {\\"Lady in the Water\\" 3.0 \\"Snakes on a Plane\\" 3.5\\r\\n                   \\"Just My Luck\\" 1.5  \\"Superman Returns\\" 5.0 \\r\\n                   \\"The Night Listener\\" 3.0 \\"You, Me and Dupree\\" 3.5}\\r\\n   \\"Michael Phillips\\" {\\"Lady in the Water\\" 2.5 \\"Snakes on a Plane\\" 3.0\\r\\n                       \\"Superman Returns\\" 3.5  \\"The Night Listener\\" 4.0}\\r\\n   \\"Claudia Puig\\" {\\"Snakes on a Plane\\" 3.5 \\"Just My Luck\\" 3.0\\r\\n                   \\"The Night Listener\\" 4.5 \\"Superman Returns\\" 4.0\\r\\n                   \\"You, Me and Dupree\\" 2.5}\\r\\n   \\"Mick LaSalle\\" {\\"Lady in the Water\\" 3.0 \\"Snakes on a Plane\\" 4.0\\r\\n                   \\"Just My Luck\\" 2.0 \\"Superman Returns\\" 3.0\\r\\n                   \\"The Night Listener\\" 3.0 \\"You, Me and Dupree\\" 2.0}, \\r\\n   \\"Jack Matthews\\" {\\"Lady in the Water\\" 3.0 \\"Snakes on a Plane\\" 4.0\\r\\n                    \\"The Night Listener\\" 3.0 \\"Superman Returns\\" 5.0 \\r\\n                    \\"You, Me and Dupree\\" 3.5}\\r\\n   \\"Toby\\" {\\"Snakes on a Plane\\" 4.5 \\"You, Me and Dupree\\" 1.0\\r\\n           \\"Superman Returns\\" 4.0}})" "(critics \\"Lisa Rose\\")" "(critics)" "critics" "(get-all-reviews 1)" "(critics \\"Lisa Rose\\")" "(critics)" "critics" "(into {}(get-all-reviews 1))" "(second [\\"Reidrover\\" 0.08163265306122448])" "users" "(contains? users \\"aca\\")" "(contains? users \:name)" "(insert-admin)" "(defn insert-admin []\\r\\n  (cm/insert\! \:users\\r\\n           {\:fullname \\"John Doe\\" \:username \\"John\\" \:password \\"Doe\\" \:email \\"aleksandar.v90@gmail.com\\" \:role \\"admin\\"}))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]))" "(insert-admin)" "(get-all-admins)" "(defn get-all-reviews [n]\\r\\n  \\"Return n user reviews (beer & score pairs for n users).\\"\\r\\n  (for [u (take n allusers)] \\r\\n    (hash-map u \\r\\n      (apply hash-map \\r\\n         (flatten (map vals \\r\\n                       (cm/fetch \:beer_data \:only\\r\\n                                 {\:_id false \\r\\n                                  \:beer_name true \\r\\n                                  \:review_overall true} \\r\\n                                 \:where \\r\\n                                 {\:review_profileName u})))))))" "(def allusers \\r\\n  (distinct (flatten (map vals \\r\\n                          (cm/fetch \\r\\n                            \:beer_data \:only\\r\\n                            {\:_id false\\r\\n                             \:review_profileName true})))))" "(defn get-all-reviews [n]\\r\\n  \\"Return n user reviews (beer & score pairs for n users).\\"\\r\\n  (for [u (take n allusers)] \\r\\n    (hash-map u \\r\\n      (apply hash-map \\r\\n         (flatten (map vals \\r\\n                       (cm/fetch \:beer_data \:only\\r\\n                                 {\:_id false \\r\\n                                  \:beer_name true \\r\\n                                  \:review_overall true} \\r\\n                                 \:where \\r\\n                                 {\:review_profileName u})))))))" "(defn get-reviews-by-user [username]\\r\\n  \\"Get all reviews for a specified user.\\"\\r\\n  (apply hash-map \\r\\n         (flatten (map vals \\r\\n                       (cm/fetch \:beer_data \:only\\r\\n                                 {\:_id false \\r\\n                                  \:beer_name true \\r\\n                                  \:review_overall true} \\r\\n                                 \:where \\r\\n                                 {\:review_profileName username})))))" "(delete-user \\"Jane\\")" "(insert-admin)" "(users)" "users" "(server .stop)" "(server .start)" "users" "server .stop" "(server .stop)" "(server jetty/.stop)" "(server .start)" "(.stop server)" "(.start server)" "(creds/bcrypt-credential-fn users {\:username \\"bob\\" \:password \\"wrong\\"})" "(require '[cemerick.friend.credentials \:as creds])" "lein dorun" "(delete-user \\"John\\")" "(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(delete-user \\"John\\")" "(insert-admin)" "\#{\:\:users/admin}" "(1\\n  )" "1" "(creds/bcrypt-credential-fn users {\:username \\"bob\\" \:password \\"wrong\\"})" "(defn get-all-admins []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:admin}}))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(get-all-admins)" "(insert-admin)" "(get-all-admins)" "users" "(insert-admin)" "(delete-user \\"John\\")" "(delete-user \\"Dave\\")" " (delete-user \\"dave\\")" "users" "user-exists? \\"dave\\"()" "(user-exists? \\"dave\\")" "(cm/fetch-count \:users \:where {{\:username \\"dave\\"}})" "(insert-admin)" "(cm/fetch-count \:users \:where {{\:username \\"John\\"}})" "(cm/fetch-count \:users \:where {\:username \\"John\\"})" "user" "users" "(get-user \\"John\\")" "page" "users" "(creds/bcrypt-credential-fn users {\:username \\"bob\\" \:password \\"wrong\\"})" "(def ff { \\"dave\\" { \:username \\"dave\\" \:password (creds/hash-bcrypt \\"password\\") }})" "(creds/bcrypt-credential-fn ff {\:username \\"bob\\" \:password \\"wrong\\"})" "(creds/bcrypt-credential-fn users {\:username \\"bob\\" \:password \\"wrong\\"})" "(creds/bcrypt-credential-fn ff {\:username \\"friend\\" \:password \\"clojure\\"})" "(creds/bcrypt-credential-fn users {\:username \\"bob\\" \:password \\"wrong\\"})" "(creds/bcrypt-credential-fn users {\:username \\"friend\\" \:password \\"clojure\\"})" "(.stop server)" "(jetty/.stop server)" "users" "(def users {\\"admin\\" {\:username \\"admin\\"\\r\\n                    \:password (creds/hash-bcrypt \\"password\\")\\r\\n                    \:roles \#{\:\:admin}}\\r\\n            \\"dave\\" {\:username \\"dave\\"\\r\\n                    \:password (creds/hash-bcrypt \\"password\\")\\r\\n                    \:roles \#{\:\:user}}})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(creds/bcrypt-credential-fn users {\:username \\"dave\\" \:password \\"password\\"})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(creds/bcrypt-credential-fn users {\:username \\"dave\\" \:password \\"password\\"})" "users(def users {\\"admin\\" {\:username \\"admin\\"\\r\\n                    \:password (creds/hash-bcrypt \\"password\\")\\r\\n                    \:roles \#{\:\:admin}}\\r\\n            \\"dave\\" {\:username \\"dave\\"\\r\\n                    \:password (creds/hash-bcrypt \\"password\\")\\r\\n                    \:roles \#{\:\:user}}})\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "@users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "users" "(creds/bcrypt-credential-fn users {\:username \\"bob\\" \:password \\"wrong\\"})" "(creds/bcrypt-credential-fn users {\:username \\"dave\\" \:password \\"password\\"})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" "(\#(partial creds/bcrypt-credential-fn @users %) {\:username \\"dave\\" \:password \\"password\\"})" "(def users (atom {\\"admin\\" {\:username \\"admin\\"\\r\\n                    \:password (creds/hash-bcrypt \\"password\\")\\r\\n                    \:roles \#{\:\:admin}}\\r\\n            \\"dave\\" {\:username \\"dave\\"\\r\\n                    \:password (creds/hash-bcrypt \\"password\\")\\r\\n                    \:roles \#{\:\:user}}}))" "(deref users)" "(def users (atom {\\"admin\\" {\:username \\"admin\\"\\r\\n                    \:password (creds/hash-bcrypt \\"password\\")\\r\\n                    \:roles \#{\:\:admin}}\\r\\n            \\"dave\\" {\:username \\"dave\\"\\r\\n                    \:password (creds/hash-bcrypt \\"password\\")\\r\\n                    \:roles \#{\:\:user}}}))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:admin} \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"Page Not Found\\"))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" ";; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})" "@users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(def users (atom {\\"friend\\" {\:username \\"friend\\"\\r\\n                            \:password (creds/hash-bcrypt \\"clojure\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"friend-admin\\" {\:username \\"friend-admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"clojure\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "\#(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401))" "(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401))" "html/deftemplate tp \\"public/index.html\\" [])" "(html/deftemplate tp \\"public/index.html\\" [])" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "\#(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" "\#(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401))" "(pprint \#(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401)))" "(print \#(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401)))" "(html/deftemplate tp \\"public/index.html\\" [])" "tp" "(resp/response\\r\\n                                           (resp/status 401)" "(resp/response\\r\\n                                           (resp/status 401))" "(resp/response (resp/status 401))" "(resp/response (html/deftemplate tp \\"public/index.html\\"[]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "bla" "(def bla (cm/fetch \:users))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "bla" "local" "bla" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "db" "d" "(def d (cm/fetch \:users))" "d" "(def bla (cm/fetch-one \:users \:only {\:_id false \:friend true}))" "bla" "(def bla (cm/fetch \:users \:only {\:_id false \:friend true}))" "bla" "(def bla (atom (cm/fetch \:users \:only {\:_id false})))" "bla" "(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))" "\\n(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(creds/bcrypt-credential-fn (string-keys (into {} (cm/fetch \:users \:only {\:_id false}))) {\:username \\"friend\\" \:password \\"clojure\\"})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" "users" "(def users (atom (string-keys \\r\\n                   (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})))))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n\\r\\n;;(defn insert-admin []\\r\\n  ;;(cm/insert\! \:users\\r\\n          ;;{\:username \\"John\\" \:password (creds/hash-bcrypt \\"Doe\\") \:email \\"aleksandar.v90@gmail.com\\" \:roles \#{\:\:admin}}))\\r\\n\\r\\n;;(def users \\r\\n  ;;(cm/fetch \:users))\\r\\n\\r\\n;;check if user exists in the db\\r\\n(defn user-exists? [username]\\r\\n  (if (\= 1 (cm/fetch-count \:users \:where {\:username username})) true false))\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n;;initial admin username \\"John\\", password \\"Doe\\"\\r\\n(defn insert-user [fullname username password email]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {\:fullname fullname \:username username \:password (creds/hash-bcrypt password) \:email email \:roles \#{\:\:user}})))\\r\\n\\r\\n;;get all admins in users collection \\r\\n(defn get-all-admins []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:admin}}))\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:user}}))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:username username}))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n;;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n\\r\\n(def users (atom (string-keys \\r\\n                   (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})))))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "user" "users" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(creds/bcrypt-credential-fn users {\:username \\"friend\\" \:password \\"password\\"})" "(creds/bcrypt-credential-fn 'users {\:username \\"friend\\" \:password \\"password\\"})" "'users" "'(users)" "users" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "(creds/bcrypt-credential-fn local-users {\:username \\"friend\\" \:password \\"password\\"})" "@users" "(creds/bcrypt-credential-fn @users {\:username \\"friend\\" \:password \\"password\\"})" "(creds/bcrypt-credential-fn @users {\:username \\"friend\\" \:password \\"clojure\\"})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n\\r\\n;;(defn insert-admin []\\r\\n  ;;(cm/insert\! \:users\\r\\n          ;;{\:username \\"John\\" \:password (creds/hash-bcrypt \\"Doe\\") \:email \\"aleksandar.v90@gmail.com\\" \:roles \#{\:\:admin}}))\\r\\n\\r\\n;;(def users \\r\\n  ;;(cm/fetch \:users))\\r\\n\\r\\n;;check if user exists in the db\\r\\n(defn user-exists? [username]\\r\\n  (if (\= 1 (cm/fetch-count \:users \:where {\:username username})) true false))\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n;;initial admin username \\"John\\", password \\"Doe\\"\\r\\n(defn insert-user [fullname username password email]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {\:fullname fullname \:username username \:password (creds/hash-bcrypt password) \:email email \:roles \#{\:\:user}})))\\r\\n\\r\\n;;get all admins in users collection \\r\\n(defn get-all-admins []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:admin}}))\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:user}}))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:username username}))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n;;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n\\r\\n(def users (atom (string-keys \\r\\n                   (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})))))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "\:\:user" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n\\r\\n;;(defn insert-admin []\\r\\n  ;;(cm/insert\! \:users\\r\\n          ;;{\:username \\"John\\" \:password (creds/hash-bcrypt \\"Doe\\") \:email \\"aleksandar.v90@gmail.com\\" \:roles \#{\:\:admin}}))\\r\\n\\r\\n;;(def users \\r\\n  ;;(cm/fetch \:users))\\r\\n\\r\\n;;check if user exists in the db\\r\\n(defn user-exists? [username]\\r\\n  (if (\= 1 (cm/fetch-count \:users \:where {\:username username})) true false))\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n;;initial admin username \\"John\\", password \\"Doe\\"\\r\\n(defn insert-user [fullname username password email]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {\:fullname fullname \:username username \:password (creds/hash-bcrypt password) \:email email \:roles \#{\:\:user}})))\\r\\n\\r\\n;;get all admins in users collection \\r\\n(defn get-all-admins []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:admin}}))\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:user}}))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:username username}))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n;;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n\\r\\n(def users (atom (string-keys \\r\\n                   (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})))))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "users" "\:\:user" "users\:\:user" "local-users" "\:\:user" "\#{\:\:user}" "\#{\:\:admin}" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "\:foo" "\:\:foo" "\:\:user" "local-users" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]))" "(coerce/coerce (cm/insert\! \:users {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{(keyword 'user)}}}))" "(coerce/coerce \#{\:\:admin} \:from \:clojure \:to \:mongo )" "(coerce/coerce \#{\:\:admin} {\:from \:clojure} {\:to \:mongo} )" "(coerce/coerce admin {\:from \:clojure} {\:to \:mongo} )" "(coerce/coerce admin {\:clojure \:mongo})" "(coerce/coerce {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}} {\:clojure \:mongo})" "(coerce/clojure->mongo admin)" "(name admin)" "(name \#{\:\:admin})" "(name \:\:admin)" "(ring.middleware.session.store/read-session admin)" "(coerce/ConvertibleToMongo admin)" "(coerce/ConvertibleToMongo \#{\:\:admin})" "(coerce/ConvertibleToMongo {\:a \:1})" "(extend-protocol ConvertibleToMongo\\r\\n  \#{}\\r\\n  (mongo->clojure [^Date d keywordize] (new DateTime d)))" "(extend-protocol coerce/ConvertibleToMongoMongo\\r\\n  Date\\r\\n  (mongo->clojure [^Date d keywordize] (new DateTime d)))" "(extend-protocol coerce/ConvertibleToMongoMongo\\r\\n     \#{}\\r\\n     (mongo->clojure [^Date d keywordize] (new DateTime d)))" "(extend-protocol coerce/ConvertibleToMongo\\r\\n        \#{}\\r\\n        (mongo->clojure [^Date d keywordize] (new DateTime d)))" "(extend-protocol coerce/ConvertibleToMongo\\r\\n           admin\\r\\n           (mongo->clojure [^Keyword admin keywordize] (.getName admin)))" "(extend-protocol coerce/ConvertibleToMongo\\r\\n              admin\\r\\n              (mongo->clojure [^Keyword admin keywordize] (.getName admin)))" "(extend-protocol coerce/ConvertibleToMongo\\r\\n                 Keyword\\r\\n                 (mongo->clojure [^Keyword admin keywordize] (.getName admin)))" "(extend-protocol coerce/ConvertibleToMongo\\r\\n                    admin\\r\\n                    (mongo->clojure [^admin o keywordize] (.getName o)))" "users" "(get users \:role)" "(get users \:friend)" "(get (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})) \:friend)" "(get (into {} \\r\\n                            (cm/fetch \:users \:only {\:_id false})) \:friend {\:role})" "(get (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) \:role )" "local-users" "(get-in (into {} \\r\\n                                  (cm/fetch \:users \:only {\:_id false})) \:role )" "(get-in (into {} \\r\\n                                     (cm/fetch \:users \:only {\:_id false})) \:role )" "(into {} \\r\\n                                        (cm/fetch \:users \:only {\:_id false}))" "(get-in (into {} \\r\\n                                        (cm/fetch \:users \:only {\:_id false})) [\:role] )" "(get-in (into {} \\r\\n                                           (cm/fetch \:users \:only {\:_id false})) [\:roles] )" "(get-in y [\:friend])" "(get-in y [\:friend \:roles])" "y" "(get-in y [\:friend \:roles])" "(keyword (str *ns*) \\"foo\\")" "(keyword (str *ns*) (get-in y [\:friend \:roles]))" "y" "(keyword (str *ns*) (get-in y [\:friend \:roles]))" "(keyword (str *ns*) (get-in y [\:user \:roles]))" "(assoc-in y [\:user \:roles] (keyword (str *ns*) (get-in y [\:user \:roles])))" "local-users" "(assoc-in y [\:user \:roles] (into \#{} (keyword (str *ns*) (get-in y [\:user \:roles]))))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "\\r\\n(creds/bcrypt-credential-fn users {\:username \\"user\\" \:password \\"pass\\"})" "users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "users" "local-users" "users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "local-users" "users" "(into \#{} \:user)" "users" "(into (sorted-set) \:user)" "(into \#{} \:\:user)" "(into \#{} (\:user))" "(into \#{} (\:\:user))" "(into \#{} {\:roles \#{\:\:user}})" "y" "(get-in y [\:user \:roles])" "users" "(set \:user)" "(into \#{} \:user)" "\:\:admin" "(into \#{} \:\:admin)" "{\:roles \#{\:\:admin}" "{\:roles \#{\:\:admin}}" "user" "users" "(val {\:roles \#{\:\:admin}})" "(vals {\:roles \#{\:\:admin}})" "(assoc (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})) \:roles (vals {\:roles \#{\:\:admin}}))" "(assoc-in (into {} \\r\\n                            (cm/fetch \:users \:only {\:_id false})) \:roles (vals {\:roles \#{\:\:admin}}))" "(assoc-in (into {} (cm/fetch \:users \:only {\:_id false})) \:roles (vals {\:roles \#{\:\:admin}}))" "(into {} (cm/fetch \:users \:only {\:_id false}))" "(assoc-in (into {} (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] (vals {\:roles \#{\:\:admin}}))" " (assoc-in (into {} (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:admin})" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))" "(def y (into {} \\r\\n                                           (cm/fetch \:users \:only {\:_id false})))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "users" "local-users" "users" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(assoc-in y [\:user \:roles] (keyword (str *ns*) (get-in y [\:user \:roles])))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "(cm/fetch \:users)" "(cm/insert\! \:users {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\\"user\\"}}})" "(cm/insert\! \:users {\\"admin\\" {\:username \\"aa\\"\\r\\n                               \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                               \:roles \#{\\"user\\"}}})" "(cm/insert\! \:users {\:bla \\"aa\\"})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:journaled)" "y" "(user-exists? \\"admin\\")" "(user-exists? \\"user\\")" "(keyword \\"admin\\")" "(cm/fetch \:users \:where {\:admin {\:username \\"admin\\"}})" "(cm/fetch \:users)" "(cm/fetch \:users \:where {\:_id \#<ObjectId 56042c5f0e3e788b3fab24d0>})" "(cm/fetch-by-id \:users \:admin)" "(cm/named \:admin)" "(cm/named \\"admin\\")" "(cm/command \\"db.users.find({'admin.username' \: 'admin'})\\")" "(cm/server-eval \\"function(){return 3+3}\\")" "(cm/fetch \:users \:where {\:admin {\:username \\"admin\\"}})" "(cm/fetch \:users\\n          )" "(cm/fetch \:users \:where {\:admin {\\"username\\" \\"admin\\"}})" "(cm/fetch \:users \:where {\\"admin\\" {\\"username\\" \\"admin\\"}})" "(cm/fetch-one \:users\\n              \\n              )" "(cm/fetch \:users \:admin)" "(cm/fetch \:users \:admin {\:username \\"admin\\"})" "(cm/fetch \:users \:where \:admin {\:username \\"admin\\"})" "(cm/fetch \:users \:where {\:admin {\:username \\"admin\\"}})" "<type clojure code here>" "(cm/fetch \:users \:where {\:admin {}})" "(cm/fetch \:users \:where {\:admin })" "(cm/command \\"db.users.find()\\")" "users" "(find users \\"admin\\")" "@users" "(find @users \\"admin\\")" "(isthere \\"admin\\")" "(username-exists? \\"admin\\")" "(find @users username)" "(find @users \\"admin\\")" "(count (find @users \\"admin\\"))" "(username-exists? \\"admin\\")" "(get @users \\"admin\\")" "(count (get @users \\"admin\\"))" "(username-exists? \\"admin\\")" "(user-exists? \\"admin\\")" "(cm/fetch-count \:users \:where {\:user {\:username \\"user\\"}})" "(user-exists? \\"admin\\")" "(cm/fetch-count \:users)" "(cm/fetch \:users \:where {\:admin {\:username \\"admin\\" \:password \\"$2a$10$8dTfB48tJU4/FA0EYkZS0.N1zuRYlBd0Km5nUreEKr26QZCQOs/t.\\" \:roles [\\"admin\\"]}})" "(cm/insert\! \:users {\:admin {\:username \\"admin\\"}})" "(cm/fetch \:users \:where {\:admin {\:username \\"admin\\"}})" "(cm/fetch-by-id \:users \\"56043a860e3e788b3fab24d7\\")" "(cm/fetch-by-id \:users (object-id 56043a860e3e788b3fab24d7))" "(cm/fetch-by-id \:users (object-id \#<ObjectId 56043a860e3e788b3fab24d7>))" "(cm/fetch-by-id \:users (cm/object-id 56043a860e3e788b3fab24d7))" "(cm/fetch-by-id \:users (cm/object-id \\"56043a860e3e788b3fab24d7\\"))" "(cm/fetch-by-id \:users (cm/object-id \\"admin\\"))" "(cm/fetch-by-id \:users (cm/object-id \\"56043a860e3e788b3fab24d7\\"))" "(cm/fetch \:users \:hint \\"admin\\")" "(insert-admin)" "users" "(username-exists? \\"admin\\")" "(cm/fetch \:users \:admin)" "(cm/fetch \:users \:where \:admin)" "(cm/fetch \:users \:where {\:admin})" "(cm/fetch \:users \:where '{\:admin})" "(cm/fetch \:users \:only [\:admin])" "(cm/insert\! \:users \\r\\n              {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\\"user\\"}}})" "(cm/fetch \:users \:only [\:admin])" "(cm/fetch \:users \:only [\:_id false \:admin])" "(cm/fetch \:users \:only [\:_id false \:admin true])" "(cm/fetch \:users \:only {\:_id false \:admin})" "(cm/fetch \:users \:only {\:_id false \:admin true})" "(count (cm/fetch \:users \:only {\:_id false \:admin true}))" "(reduce empty? (cm/fetch \:users \:only {\:_id false \:admin true}))" "(empty? (cm/fetch \:users \:only {\:_id false \:admin true}))" "(drop-while empty? (cm/fetch \:users \:only {\:_id false \:admin true}))" "(reduce not-empty (cm/fetch \:users \:only {\:_id false \:admin true}))" "(apply not-empty (cm/fetch \:users \:only {\:_id false \:admin true}))" "(map not-empty (cm/fetch \:users \:only {\:_id false \:admin true}))" "(map empty? (cm/fetch \:users \:only {\:_id false \:admin true}))" "(map if-let (cm/fetch \:users \:only {\:_id false \:admin true}))" "(filter not-empty (cm/fetch \:users \:only {\:_id false \:admin true}))" "(count (filter not-empty (cm/fetch \:users \:only {\:_id false \:admin true})))" "(username-exists? \\"admin\\")" "(insert-user \\"marko\\" \\"mare\\" \\"user\\")" "(user-exists? \\"marko\\")" "(get-all-users)" "(get-user \\"marko\\")" "(cm/destroy\! \:users {\:username \\"admin\\"})" "(cm/destroy\! \:users \:where {(get-user \\"marko\\")})" "(into {} (get-user \\"marko\\"))" "(cm/destroy\! \:users \:where (into {} (get-user \\"marko\\")))" "(flatten (into {} (get-user \\"marko\\")))" "(into {} (get-user \\"marko\\"))" "(cm/destroy\! \:users \:where {\:marko {\:username \\"marko\\", \:password \\"$2a$10$cHcp44MWQVkSNIJuogcPG.t9ijUPVTUOyh05eLQHUepyWAeCHdEb2\\", \:roles [\\"user\\"]}})" "(cm/destroy\! \:users \:where {\\"marko\\" {\:username \\"marko\\", \:password \\"$2a$10$cHcp44MWQVkSNIJuogcPG.t9ijUPVTUOyh05eLQHUepyWAeCHdEb2\\", \:roles [\\"user\\"]}})" "(cm/destroy\! \:users \:where {\:username \\"marko\\", \:password \\"$2a$10$cHcp44MWQVkSNIJuogcPG.t9ijUPVTUOyh05eLQHUepyWAeCHdEb2\\", \:roles [\\"user\\"]})" "(cm/destroy\! \:users {\:where {\:marko {\:username \\"marko\\", \:password \\"$2a$10$cHcp44MWQVkSNIJuogcPG.t9ijUPVTUOyh05eLQHUepyWAeCHdEb2\\", \:roles [\\"user\\"]}}})" "(cm/destroy\! \:users {\:where \:marko {\:username \\"marko\\", \:password \\"$2a$10$cHcp44MWQVkSNIJuogcPG.t9ijUPVTUOyh05eLQHUepyWAeCHdEb2\\", \:roles [\\"user\\"]}})" "(cm/destroy\! \:users {\:marko {\:$in (map marko (cm/fetch \:users))}})" "(cm/destroy\! \:users {\:marko {\:$in (map \:marko (cm/fetch \:users))}})" "(map \:marko (cm/fetch \:users))" "(cm/destroy\! \:users {\:marko {\:$in (map \:marko (cm/fetch \:users \:marko))}})" "(cm/fetch \:users \:marko)" "(cm/fetch \:users)" "(insert-admin)" "(cm/fetch \:users)" "(cm/fetch \:users {\:marko})" "(cm/fetch \:users {\:marko (get-user)})" "(cm/fetch \:users {\:marko (get-user \\"admin\\")})" "(cm/fetch \:users {\:admin (get-user \\"admin\\")})" "(cm/fetch \:users {\:admin (vals (get-user \\"admin\\"))})" "(cm/fetch \:users {\:admin (into {} (get-user \\"admin\\"))})" "(cm/fetch \:users {\:admin '(into {} (get-user \\"admin\\"))})" "(cm/fetch \:users (assoc \:admin (into {} (get-user \\"admin\\")))" "(cm/fetch \:users (assoc \:admin (into {} (get-user \\"admin\\"))))" "(cm/fetch \:users (assoc {} \:admin (into {} (get-user \\"admin\\"))))" "(cm/fetch \:users (assoc {} \:admin (into {} (vals (get-user \\"admin\\")))))" "(get-user \\"admin\\")" "(val (get-user \\"admin\\"))" "(vals (get-user \\"admin\\"))" "(map vals (get-user \\"admin\\"))" "(into {} (map vals (get-user \\"admin\\")))" "(flatten (map vals (get-user \\"admin\\")))" "(assoc {} \:admin (flatten (map vals (get-user \\"admin\\"))))" "(cm/destroy\! \:users \:where (assoc {} \:admin (flatten (map vals (get-user \\"admin\\")))))" "(cm/destroy\! \:users \:where {\:admin {\:username \\"admin\\" \:password \\"$2a$10$v3h/8w2OXf4HjWtzjXCNdeBHm9OUo0SiZv4BJuR15aDCqYN5fZKne\\" \:roles [\\"admin\\"]}})" " (cm/destroy\! \:users \:where {\\"admin\\" {\:username \\"admin\\" \:password \\"$2a$10$v3h/8w2OXf4HjWtzjXCNdeBHm9OUo0SiZv4BJuR15aDCqYN5fZKne\\" \:roles [\\"admin\\"]}})" "(& {\\"admin\\" {\:username \\"admin\\" \:password \\"$2a$10$v3h/8w2OXf4HjWtzjXCNdeBHm9OUo0SiZv4BJuR15aDCqYN5fZKne\\" \:roles [\\"admin\\"]}})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)\\r\\n\\r\\n\\r\\n;;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n;;fetch users from database\\r\\n(def users (atom \\r\\n             (string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:user}))))\\r\\n\\r\\n(derive \:\:admin \:\:user)\\r\\n\\r\\n;;initial admin username \\"admin\\", password \\"pass\\"\\r\\n(defn insert-admin []\\r\\n  (cm/insert\! \:users \\r\\n              {\\"admin\\" {\:username \\"admin\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\\"admin\\"}}}))\\r\\n\\r\\n\\r\\n;;check if user exists in fetched users\\r\\n(defn user-exists? [username] \\r\\n  (if (not\= 0 (count \\r\\n                (filter not-empty \\r\\n                        (cm/fetch \:users \:only {\:_id false (keyword username) true})))) true false))\\r\\n\\r\\n\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n(defn insert-user [username password roles]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {username {\:username username\\r\\n                            \:password (creds/hash-bcrypt password)\\r\\n                            \:roles \#{roles}}})))\\r\\n\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:user})))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (filter not-empty (cm/fetch \:users \:only {\:_id false (keyword username) true})))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "\:\:users/admin" "users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)\\r\\n\\r\\n\\r\\n;;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n;;fetch users from database\\r\\n(def users (atom \\r\\n             (string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:user}))))\\r\\n\\r\\n(derive \:\:admin \:\:user)\\r\\n\\r\\n;;initial admin username \\"admin\\", password \\"pass\\"\\r\\n(defn insert-admin []\\r\\n  (cm/insert\! \:users \\r\\n              {\\"admin\\" {\:username \\"admin\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\\"admin\\"}}}))\\r\\n\\r\\n\\r\\n;;check if user exists in fetched users\\r\\n(defn user-exists? [username] \\r\\n  (if (not\= 0 (count \\r\\n                (filter not-empty \\r\\n                        (cm/fetch \:users \:only {\:_id false (keyword username) true})))) true false))\\r\\n\\r\\n\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n(defn insert-user [username password roles]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {username {\:username username\\r\\n                            \:password (creds/hash-bcrypt password)\\r\\n                            \:roles \#{roles}}})))\\r\\n\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:user})))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (filter not-empty (cm/fetch \:users \:only {\:_id false (keyword username) true})))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "users" "(insert-admin)" "users" "(insert-user \\"user\\" \\"pass\\" \\"user\\")" "user" "users" "(string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users))))" "(into {} \\r\\n                                  (cm/fetch \:users))" "(cm/fetch \:users))" "(cm/fetch \:users)" "(into {} (cm/fetch \:users))" "users" "(cm/fetch \:users \:only {\:_id false})" "(keys (cm/fetch \:users \:only {\:_id false}))" "(keys (into {} (cm/fetch \:users \:only {\:_id false})))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))" "(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div\#page-content-wrapper] (html/content (\:content post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:post \\"Functional programming\!\\"})" ";;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @local-users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(defonce server (jetty/run-jetty \#'app {\:port 8080 \:join false}))" "(.stop @server)" "(server)" "(.stop server.clj-db)" "(.start server.clj-db)" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(.stop server)" "(.start server)" "(.stop server)" "(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.page-content-wrapper] (html/content (\:content post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:content \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  (get-page \\"template.html\\" sample-post)))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @local-users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))\\r\\n\\r\\n(html/defsnippet index-template \\"public/index.html\\"\\r\\n  [\:header]\\r\\n  [heading navigation-elements]\\r\\n  [\:h1] (html/content heading)\\r\\n  [\:ul [\:li html/first-of-type]] (html/clone-for [[caption url] navigation-elements]\\r\\n                                                 [\:li \:a] (html/content caption)\\r\\n                                                 [\:li \:a] (html/set-attr \:href url)))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))" "(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:content post))))" "(.stop server)" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:content post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:content \\"Functional programming\!\\"})" ";;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  (get-page \\"template.html\\" sample-post)))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @local-users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:content post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:content \\"Functional programming\!\\"})" "(.stop server)" "s" "main-template" "(print main-template)" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))" "(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:content post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:content \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin} main-template) )\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @local-users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(clojure.pprint main-template)" "main-template" "(main-template)" "(template-page)" "(get-page \\"public/index.html\\" sample-post)" "(template-page \\"public/index.html\\")" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))\\r\\n\\r\\n;; Define the template\\r\\n  (html/deftemplate template-page \\"public/index.html\\"\\r\\n  []\\r\\n    [\:title] (html/content  \\"Funckiopnalno\\")\\r\\n  [\:div.post-body] (html/content  \\"Opaopaopaas\\"))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:content \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (template-page)))\\r\\n (GET \\"/admin\\" request\\r\\n       \\"Login\\" )\\r\\n  (GET \\"/login\\" [] (template-page))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @local-users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "  (html/deftemplate template-page \\"public/index.html\\"\\r\\n  [\:header]\\r\\n    [tes]\\r\\n  [\:title] (html/content  \\"Welcome to beer rating site.\\")\\r\\n  [\:ul.beers[\:li html/first-of-type]] (html/clone-for [[a b] tes]\\r\\n                                                 [\:li \:a] (html/content a)\\r\\n                                                 [\:li \:a] (html/set-attr \:href b)))" "(template-page '(1 2 3 4))" "(template-page {2 3 4 4})" "(template-page {\:a 1 \:b 3 \:c 3})" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(cm/mongo\! \:db \\"beerdb\\")" "(get-column-names)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(template-page ds/get-column-names)" "(ds/get-column-names)" "(vals ds/get-column-names)" "(defn get-all-reviews [n]\\r\\n  \\"Return n user reviews (beer & score pairs for n users).\\"\\r\\n  (for [u (take n allusers)] \\r\\n    (hash-map u \\r\\n      (apply hash-map \\r\\n         (flatten (map vals \\r\\n                       (cm/fetch \:beer_data \:only\\r\\n                                 {\:_id false \\r\\n                                  \:beer_name true \\r\\n                                  \:review_overall true} \\r\\n                                 \:where \\r\\n                                 {\:review_profileName u})))))))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (template-page test)))\\r\\n (GET \\"/admin\\" request\\r\\n       \\"Login\\" )\\r\\n  (GET \\"/login\\" [] (template-page ds/get-all-reviews 5))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (template-page test)))\\r\\n (GET \\"/admin\\" request\\r\\n       \\"Login\\" )\\r\\n  (GET \\"/login\\" [] (template-page ds/get-all-reviews 5))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(template-page (map keys (ds/get-all-reviews 1)))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(get-column-names)" "(fetch-data-for-user \\"stcules\\")" "(get-reviews-by-user \\"stcules\\")" "(into [] (get-reviews-by-user \\"stcules\\"))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(def things [\\"one\\" \\"two\\" \\"three\\" \\"four\\"])" "things" "(reduce str (into [] (ds/get-reviews-by-user \\"stcules\\")))" "(map str (into [] (ds/get-reviews-by-user \\"stcules\\")))" "(ds/get-reviews-by-user \\"stcules\\")" "(keys (ds/get-reviews-by-user \\"stcules\\"))" "(into [] (keys (ds/get-reviews-by-user \\"stcules\\")))" "local-users" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(show-adminu)" "(defn get-column-names []\\r\\n  \\"Get column names for existing dataset.\\"\\r\\n  (core/col-names beer-data))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(get-column-names)" "allbeers" "(count allbeers)" "(sort allbeers)" "(sorted? allbeers)" "(sort str allbeers)" "(sort \#(compare (str/upper-case %1) (str/upper-case %2)) allbeers)" "(require [clojure.contrib.string \:as str])" "(sort < allbeers)" "(sort-by allbeers)" "(sort-by str allbeers)" "(count (into [](sort-by str ds/allbeers)))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(count (into [](sort-by str ds/allbeers)))" "(html/emit* \\r\\n                                          (show (into [] \\r\\n                                                      (sort-by str ds/allbeers))))" "(show (into [] \\r\\n                                                         (sort-by str ds/allbeers)))" "(seq? ds/allbeers)" "(for [x ds/allbeers]\\n  (print x))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(def allbeers \\r\\n  (distinct (flatten (map vals \\r\\n                          (cm/fetch \\r\\n                            \:beer_data \:only\\r\\n                            {\:_id false\\r\\n                             \:beer_name true})))))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(get-column-names)" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(show (into [] \\r\\n                                                      (sort-by str ds/allbeers)))" "(into [] \\r\\n                                                         (sort-by str ds/allbeers))" "((into [] \\r\\n                                                         (sort-by str ds/allbeers)))" "(count (into [] \\r\\n                                                         (sort-by str ds/allbeers)))" "(for [x ds/allbeers]\\n  println x)" "(for [x ds/allbeers]\\r\\n     (println x))" "(for [x (into [] \\r\\n                                                      (sort-by str ds/allbeers))]\\n  (println x))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(def beer-data (db/fetch-dataset \:beer_data))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(def data\\r\\n  (io/read-dataset\\r\\n   \\"xaa.csv\\"\\r\\n   \:header true \:delim \\\\,))" "(cm/mass-insert\! \:beer_data (\:rows data))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(cm/set-connection\! connection)" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" ";;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n;;fetch users from database\\r\\n;;not working\!\!\!\!\!\!\!\!\\r\\n(def users (atom \\r\\n             (string-keys \\r\\n               (for [x (keys (into {} (cm/fetch \:users \:only {\:_id false})))]\\r\\n                 (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [x \:roles] \#{\:\:user})))))\\r\\n\\r\\n(derive \:\:admin \:\:user)\\r\\n\\r\\n;;initial admin username \\"admin\\", password \\"pass\\"\\r\\n(defn insert-admin []\\r\\n  (cm/insert\! \:users \\r\\n              {\\"admin\\" {\:username \\"admin\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\\"admin\\"}}}))\\r\\n\\r\\n\\r\\n;;check if user exists in fetched users\\r\\n(defn user-exists? [username] \\r\\n  (if (not\= 0 (count \\r\\n                (filter not-empty \\r\\n                        (cm/fetch \:users \:only {\:_id false (keyword username) true})))) true false))\\r\\n\\r\\n\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n(defn insert-user [username password roles]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {username {\:username username\\r\\n                            \:password (creds/hash-bcrypt password)\\r\\n                            \:roles \#{roles}}})))\\r\\n\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:user})))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (filter not-empty (cm/fetch \:users \:only {\:_id false (keyword username) true})))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(defn show [things]\\r\\n  (html/at (html/html-resource \\"public/index.html\\")\\r\\n      [\:select.beers [\:option html/first-of-type]] \\r\\n      (html/clone-for [thing things] (html/content thing))))\\r\\n\\r\\n(defn show-login []\\r\\n  (html/at (html/html-resource \\"public/login.html\\")))\\r\\n\\r\\n\\r\\n(defn show-adminb []\\r\\n  (html/at (html/html-resource \\"public/adminb.html\\")))\\r\\n\\r\\n(defn show-adminu []\\r\\n  (html/at (html/html-resource \\"public/adminu.html\\")))\\r\\n\\r\\n(defn show-about []\\r\\n  (html/at (html/html-resource \\"public/about.html\\")))"]
eclipse.preferences.version=1
