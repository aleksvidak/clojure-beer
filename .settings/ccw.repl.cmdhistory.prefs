cmdhistory=["users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:admin} \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"Page Not Found\\"))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" ";; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})" "@users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(def users (atom {\\"friend\\" {\:username \\"friend\\"\\r\\n                            \:password (creds/hash-bcrypt \\"clojure\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"friend-admin\\" {\:username \\"friend-admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"clojure\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "\#(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401))" "(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401))" "html/deftemplate tp \\"public/index.html\\" [])" "(html/deftemplate tp \\"public/index.html\\" [])" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "\#(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" "\#(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401))" "(pprint \#(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401)))" "(print \#(-> (html/deftemplate tp \\"public/index.html\\" [])\\r\\n                                        resp/response\\r\\n                                        (resp/status 401)))" "(html/deftemplate tp \\"public/index.html\\" [])" "tp" "(resp/response\\r\\n                                           (resp/status 401)" "(resp/response\\r\\n                                           (resp/status 401))" "(resp/response (resp/status 401))" "(resp/response (html/deftemplate tp \\"public/index.html\\"[]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "bla" "(def bla (cm/fetch \:users))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "bla" "local" "bla" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "db" "d" "(def d (cm/fetch \:users))" "d" "(def bla (cm/fetch-one \:users \:only {\:_id false \:friend true}))" "bla" "(def bla (cm/fetch \:users \:only {\:_id false \:friend true}))" "bla" "(def bla (atom (cm/fetch \:users \:only {\:_id false})))" "bla" "(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))" "\\n(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(creds/bcrypt-credential-fn (string-keys (into {} (cm/fetch \:users \:only {\:_id false}))) {\:username \\"friend\\" \:password \\"clojure\\"})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" "users" "(def users (atom (string-keys \\r\\n                   (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})))))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n\\r\\n;;(defn insert-admin []\\r\\n  ;;(cm/insert\! \:users\\r\\n          ;;{\:username \\"John\\" \:password (creds/hash-bcrypt \\"Doe\\") \:email \\"aleksandar.v90@gmail.com\\" \:roles \#{\:\:admin}}))\\r\\n\\r\\n;;(def users \\r\\n  ;;(cm/fetch \:users))\\r\\n\\r\\n;;check if user exists in the db\\r\\n(defn user-exists? [username]\\r\\n  (if (\= 1 (cm/fetch-count \:users \:where {\:username username})) true false))\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n;;initial admin username \\"John\\", password \\"Doe\\"\\r\\n(defn insert-user [fullname username password email]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {\:fullname fullname \:username username \:password (creds/hash-bcrypt password) \:email email \:roles \#{\:\:user}})))\\r\\n\\r\\n;;get all admins in users collection \\r\\n(defn get-all-admins []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:admin}}))\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:user}}))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:username username}))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n;;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n\\r\\n(def users (atom (string-keys \\r\\n                   (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})))))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "user" "users" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(creds/bcrypt-credential-fn users {\:username \\"friend\\" \:password \\"password\\"})" "(creds/bcrypt-credential-fn 'users {\:username \\"friend\\" \:password \\"password\\"})" "'users" "'(users)" "users" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "(creds/bcrypt-credential-fn local-users {\:username \\"friend\\" \:password \\"password\\"})" "@users" "(creds/bcrypt-credential-fn @users {\:username \\"friend\\" \:password \\"password\\"})" "(creds/bcrypt-credential-fn @users {\:username \\"friend\\" \:password \\"clojure\\"})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n\\r\\n;;(defn insert-admin []\\r\\n  ;;(cm/insert\! \:users\\r\\n          ;;{\:username \\"John\\" \:password (creds/hash-bcrypt \\"Doe\\") \:email \\"aleksandar.v90@gmail.com\\" \:roles \#{\:\:admin}}))\\r\\n\\r\\n;;(def users \\r\\n  ;;(cm/fetch \:users))\\r\\n\\r\\n;;check if user exists in the db\\r\\n(defn user-exists? [username]\\r\\n  (if (\= 1 (cm/fetch-count \:users \:where {\:username username})) true false))\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n;;initial admin username \\"John\\", password \\"Doe\\"\\r\\n(defn insert-user [fullname username password email]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {\:fullname fullname \:username username \:password (creds/hash-bcrypt password) \:email email \:roles \#{\:\:user}})))\\r\\n\\r\\n;;get all admins in users collection \\r\\n(defn get-all-admins []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:admin}}))\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:user}}))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:username username}))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n;;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n\\r\\n(def users (atom (string-keys \\r\\n                   (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})))))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "\:\:user" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n\\r\\n;;(defn insert-admin []\\r\\n  ;;(cm/insert\! \:users\\r\\n          ;;{\:username \\"John\\" \:password (creds/hash-bcrypt \\"Doe\\") \:email \\"aleksandar.v90@gmail.com\\" \:roles \#{\:\:admin}}))\\r\\n\\r\\n;;(def users \\r\\n  ;;(cm/fetch \:users))\\r\\n\\r\\n;;check if user exists in the db\\r\\n(defn user-exists? [username]\\r\\n  (if (\= 1 (cm/fetch-count \:users \:where {\:username username})) true false))\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n;;initial admin username \\"John\\", password \\"Doe\\"\\r\\n(defn insert-user [fullname username password email]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {\:fullname fullname \:username username \:password (creds/hash-bcrypt password) \:email email \:roles \#{\:\:user}})))\\r\\n\\r\\n;;get all admins in users collection \\r\\n(defn get-all-admins []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:admin}}))\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:roles \#{\:\:user}}))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (cm/fetch \:users \:where\\r\\n            {\:username username}))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n;;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n\\r\\n(def users (atom (string-keys \\r\\n                   (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})))))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "users" "\:\:user" "users\:\:user" "local-users" "\:\:user" "\#{\:\:user}" "\#{\:\:admin}" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "\:foo" "\:\:foo" "\:\:user" "local-users" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]))" "(coerce/coerce (cm/insert\! \:users {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{(keyword 'user)}}}))" "(coerce/coerce \#{\:\:admin} \:from \:clojure \:to \:mongo )" "(coerce/coerce \#{\:\:admin} {\:from \:clojure} {\:to \:mongo} )" "(coerce/coerce admin {\:from \:clojure} {\:to \:mongo} )" "(coerce/coerce admin {\:clojure \:mongo})" "(coerce/coerce {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}} {\:clojure \:mongo})" "(coerce/clojure->mongo admin)" "(name admin)" "(name \#{\:\:admin})" "(name \:\:admin)" "(ring.middleware.session.store/read-session admin)" "(coerce/ConvertibleToMongo admin)" "(coerce/ConvertibleToMongo \#{\:\:admin})" "(coerce/ConvertibleToMongo {\:a \:1})" "(extend-protocol ConvertibleToMongo\\r\\n  \#{}\\r\\n  (mongo->clojure [^Date d keywordize] (new DateTime d)))" "(extend-protocol coerce/ConvertibleToMongoMongo\\r\\n  Date\\r\\n  (mongo->clojure [^Date d keywordize] (new DateTime d)))" "(extend-protocol coerce/ConvertibleToMongoMongo\\r\\n     \#{}\\r\\n     (mongo->clojure [^Date d keywordize] (new DateTime d)))" "(extend-protocol coerce/ConvertibleToMongo\\r\\n        \#{}\\r\\n        (mongo->clojure [^Date d keywordize] (new DateTime d)))" "(extend-protocol coerce/ConvertibleToMongo\\r\\n           admin\\r\\n           (mongo->clojure [^Keyword admin keywordize] (.getName admin)))" "(extend-protocol coerce/ConvertibleToMongo\\r\\n              admin\\r\\n              (mongo->clojure [^Keyword admin keywordize] (.getName admin)))" "(extend-protocol coerce/ConvertibleToMongo\\r\\n                 Keyword\\r\\n                 (mongo->clojure [^Keyword admin keywordize] (.getName admin)))" "(extend-protocol coerce/ConvertibleToMongo\\r\\n                    admin\\r\\n                    (mongo->clojure [^admin o keywordize] (.getName o)))" "users" "(get users \:role)" "(get users \:friend)" "(get (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})) \:friend)" "(get (into {} \\r\\n                            (cm/fetch \:users \:only {\:_id false})) \:friend {\:role})" "(get (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) \:role )" "local-users" "(get-in (into {} \\r\\n                                  (cm/fetch \:users \:only {\:_id false})) \:role )" "(get-in (into {} \\r\\n                                     (cm/fetch \:users \:only {\:_id false})) \:role )" "(into {} \\r\\n                                        (cm/fetch \:users \:only {\:_id false}))" "(get-in (into {} \\r\\n                                        (cm/fetch \:users \:only {\:_id false})) [\:role] )" "(get-in (into {} \\r\\n                                           (cm/fetch \:users \:only {\:_id false})) [\:roles] )" "(get-in y [\:friend])" "(get-in y [\:friend \:roles])" "y" "(get-in y [\:friend \:roles])" "(keyword (str *ns*) \\"foo\\")" "(keyword (str *ns*) (get-in y [\:friend \:roles]))" "y" "(keyword (str *ns*) (get-in y [\:friend \:roles]))" "(keyword (str *ns*) (get-in y [\:user \:roles]))" "(assoc-in y [\:user \:roles] (keyword (str *ns*) (get-in y [\:user \:roles])))" "local-users" "(assoc-in y [\:user \:roles] (into \#{} (keyword (str *ns*) (get-in y [\:user \:roles]))))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "\\r\\n(creds/bcrypt-credential-fn users {\:username \\"user\\" \:password \\"pass\\"})" "users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "users" "local-users" "users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "local-users" "users" "(into \#{} \:user)" "users" "(into (sorted-set) \:user)" "(into \#{} \:\:user)" "(into \#{} (\:user))" "(into \#{} (\:\:user))" "(into \#{} {\:roles \#{\:\:user}})" "y" "(get-in y [\:user \:roles])" "users" "(set \:user)" "(into \#{} \:user)" "\:\:admin" "(into \#{} \:\:admin)" "{\:roles \#{\:\:admin}" "{\:roles \#{\:\:admin}}" "user" "users" "(val {\:roles \#{\:\:admin}})" "(vals {\:roles \#{\:\:admin}})" "(assoc (into {} \\r\\n                         (cm/fetch \:users \:only {\:_id false})) \:roles (vals {\:roles \#{\:\:admin}}))" "(assoc-in (into {} \\r\\n                            (cm/fetch \:users \:only {\:_id false})) \:roles (vals {\:roles \#{\:\:admin}}))" "(assoc-in (into {} (cm/fetch \:users \:only {\:_id false})) \:roles (vals {\:roles \#{\:\:admin}}))" "(into {} (cm/fetch \:users \:only {\:_id false}))" "(assoc-in (into {} (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] (vals {\:roles \#{\:\:admin}}))" " (assoc-in (into {} (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:admin})" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))" "(def y (into {} \\r\\n                                           (cm/fetch \:users \:only {\:_id false})))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "users" "local-users" "users" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(assoc-in y [\:user \:roles] (keyword (str *ns*) (get-in y [\:user \:roles])))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)" "(cm/fetch \:users)" "(cm/insert\! \:users {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\\"user\\"}}})" "(cm/insert\! \:users {\\"admin\\" {\:username \\"aa\\"\\r\\n                               \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                               \:roles \#{\\"user\\"}}})" "(cm/insert\! \:users {\:bla \\"aa\\"})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:journaled)" "y" "(user-exists? \\"admin\\")" "(user-exists? \\"user\\")" "(keyword \\"admin\\")" "(cm/fetch \:users \:where {\:admin {\:username \\"admin\\"}})" "(cm/fetch \:users)" "(cm/fetch \:users \:where {\:_id \#<ObjectId 56042c5f0e3e788b3fab24d0>})" "(cm/fetch-by-id \:users \:admin)" "(cm/named \:admin)" "(cm/named \\"admin\\")" "(cm/command \\"db.users.find({'admin.username' \: 'admin'})\\")" "(cm/server-eval \\"function(){return 3+3}\\")" "(cm/fetch \:users \:where {\:admin {\:username \\"admin\\"}})" "(cm/fetch \:users\\n          )" "(cm/fetch \:users \:where {\:admin {\\"username\\" \\"admin\\"}})" "(cm/fetch \:users \:where {\\"admin\\" {\\"username\\" \\"admin\\"}})" "(cm/fetch-one \:users\\n              \\n              )" "(cm/fetch \:users \:admin)" "(cm/fetch \:users \:admin {\:username \\"admin\\"})" "(cm/fetch \:users \:where \:admin {\:username \\"admin\\"})" "(cm/fetch \:users \:where {\:admin {\:username \\"admin\\"}})" "<type clojure code here>" "(cm/fetch \:users \:where {\:admin {}})" "(cm/fetch \:users \:where {\:admin })" "(cm/command \\"db.users.find()\\")" "users" "(find users \\"admin\\")" "@users" "(find @users \\"admin\\")" "(isthere \\"admin\\")" "(username-exists? \\"admin\\")" "(find @users username)" "(find @users \\"admin\\")" "(count (find @users \\"admin\\"))" "(username-exists? \\"admin\\")" "(get @users \\"admin\\")" "(count (get @users \\"admin\\"))" "(username-exists? \\"admin\\")" "(user-exists? \\"admin\\")" "(cm/fetch-count \:users \:where {\:user {\:username \\"user\\"}})" "(user-exists? \\"admin\\")" "(cm/fetch-count \:users)" "(cm/fetch \:users \:where {\:admin {\:username \\"admin\\" \:password \\"$2a$10$8dTfB48tJU4/FA0EYkZS0.N1zuRYlBd0Km5nUreEKr26QZCQOs/t.\\" \:roles [\\"admin\\"]}})" "(cm/insert\! \:users {\:admin {\:username \\"admin\\"}})" "(cm/fetch \:users \:where {\:admin {\:username \\"admin\\"}})" "(cm/fetch-by-id \:users \\"56043a860e3e788b3fab24d7\\")" "(cm/fetch-by-id \:users (object-id 56043a860e3e788b3fab24d7))" "(cm/fetch-by-id \:users (object-id \#<ObjectId 56043a860e3e788b3fab24d7>))" "(cm/fetch-by-id \:users (cm/object-id 56043a860e3e788b3fab24d7))" "(cm/fetch-by-id \:users (cm/object-id \\"56043a860e3e788b3fab24d7\\"))" "(cm/fetch-by-id \:users (cm/object-id \\"admin\\"))" "(cm/fetch-by-id \:users (cm/object-id \\"56043a860e3e788b3fab24d7\\"))" "(cm/fetch \:users \:hint \\"admin\\")" "(insert-admin)" "users" "(username-exists? \\"admin\\")" "(cm/fetch \:users \:admin)" "(cm/fetch \:users \:where \:admin)" "(cm/fetch \:users \:where {\:admin})" "(cm/fetch \:users \:where '{\:admin})" "(cm/fetch \:users \:only [\:admin])" "(cm/insert\! \:users \\r\\n              {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\\"user\\"}}})" "(cm/fetch \:users \:only [\:admin])" "(cm/fetch \:users \:only [\:_id false \:admin])" "(cm/fetch \:users \:only [\:_id false \:admin true])" "(cm/fetch \:users \:only {\:_id false \:admin})" "(cm/fetch \:users \:only {\:_id false \:admin true})" "(count (cm/fetch \:users \:only {\:_id false \:admin true}))" "(reduce empty? (cm/fetch \:users \:only {\:_id false \:admin true}))" "(empty? (cm/fetch \:users \:only {\:_id false \:admin true}))" "(drop-while empty? (cm/fetch \:users \:only {\:_id false \:admin true}))" "(reduce not-empty (cm/fetch \:users \:only {\:_id false \:admin true}))" "(apply not-empty (cm/fetch \:users \:only {\:_id false \:admin true}))" "(map not-empty (cm/fetch \:users \:only {\:_id false \:admin true}))" "(map empty? (cm/fetch \:users \:only {\:_id false \:admin true}))" "(map if-let (cm/fetch \:users \:only {\:_id false \:admin true}))" "(filter not-empty (cm/fetch \:users \:only {\:_id false \:admin true}))" "(count (filter not-empty (cm/fetch \:users \:only {\:_id false \:admin true})))" "(username-exists? \\"admin\\")" "(insert-user \\"marko\\" \\"mare\\" \\"user\\")" "(user-exists? \\"marko\\")" "(get-all-users)" "(get-user \\"marko\\")" "(cm/destroy\! \:users {\:username \\"admin\\"})" "(cm/destroy\! \:users \:where {(get-user \\"marko\\")})" "(into {} (get-user \\"marko\\"))" "(cm/destroy\! \:users \:where (into {} (get-user \\"marko\\")))" "(flatten (into {} (get-user \\"marko\\")))" "(into {} (get-user \\"marko\\"))" "(cm/destroy\! \:users \:where {\:marko {\:username \\"marko\\", \:password \\"$2a$10$cHcp44MWQVkSNIJuogcPG.t9ijUPVTUOyh05eLQHUepyWAeCHdEb2\\", \:roles [\\"user\\"]}})" "(cm/destroy\! \:users \:where {\\"marko\\" {\:username \\"marko\\", \:password \\"$2a$10$cHcp44MWQVkSNIJuogcPG.t9ijUPVTUOyh05eLQHUepyWAeCHdEb2\\", \:roles [\\"user\\"]}})" "(cm/destroy\! \:users \:where {\:username \\"marko\\", \:password \\"$2a$10$cHcp44MWQVkSNIJuogcPG.t9ijUPVTUOyh05eLQHUepyWAeCHdEb2\\", \:roles [\\"user\\"]})" "(cm/destroy\! \:users {\:where {\:marko {\:username \\"marko\\", \:password \\"$2a$10$cHcp44MWQVkSNIJuogcPG.t9ijUPVTUOyh05eLQHUepyWAeCHdEb2\\", \:roles [\\"user\\"]}}})" "(cm/destroy\! \:users {\:where \:marko {\:username \\"marko\\", \:password \\"$2a$10$cHcp44MWQVkSNIJuogcPG.t9ijUPVTUOyh05eLQHUepyWAeCHdEb2\\", \:roles [\\"user\\"]}})" "(cm/destroy\! \:users {\:marko {\:$in (map marko (cm/fetch \:users))}})" "(cm/destroy\! \:users {\:marko {\:$in (map \:marko (cm/fetch \:users))}})" "(map \:marko (cm/fetch \:users))" "(cm/destroy\! \:users {\:marko {\:$in (map \:marko (cm/fetch \:users \:marko))}})" "(cm/fetch \:users \:marko)" "(cm/fetch \:users)" "(insert-admin)" "(cm/fetch \:users)" "(cm/fetch \:users {\:marko})" "(cm/fetch \:users {\:marko (get-user)})" "(cm/fetch \:users {\:marko (get-user \\"admin\\")})" "(cm/fetch \:users {\:admin (get-user \\"admin\\")})" "(cm/fetch \:users {\:admin (vals (get-user \\"admin\\"))})" "(cm/fetch \:users {\:admin (into {} (get-user \\"admin\\"))})" "(cm/fetch \:users {\:admin '(into {} (get-user \\"admin\\"))})" "(cm/fetch \:users (assoc \:admin (into {} (get-user \\"admin\\")))" "(cm/fetch \:users (assoc \:admin (into {} (get-user \\"admin\\"))))" "(cm/fetch \:users (assoc {} \:admin (into {} (get-user \\"admin\\"))))" "(cm/fetch \:users (assoc {} \:admin (into {} (vals (get-user \\"admin\\")))))" "(get-user \\"admin\\")" "(val (get-user \\"admin\\"))" "(vals (get-user \\"admin\\"))" "(map vals (get-user \\"admin\\"))" "(into {} (map vals (get-user \\"admin\\")))" "(flatten (map vals (get-user \\"admin\\")))" "(assoc {} \:admin (flatten (map vals (get-user \\"admin\\"))))" "(cm/destroy\! \:users \:where (assoc {} \:admin (flatten (map vals (get-user \\"admin\\")))))" "(cm/destroy\! \:users \:where {\:admin {\:username \\"admin\\" \:password \\"$2a$10$v3h/8w2OXf4HjWtzjXCNdeBHm9OUo0SiZv4BJuR15aDCqYN5fZKne\\" \:roles [\\"admin\\"]}})" " (cm/destroy\! \:users \:where {\\"admin\\" {\:username \\"admin\\" \:password \\"$2a$10$v3h/8w2OXf4HjWtzjXCNdeBHm9OUo0SiZv4BJuR15aDCqYN5fZKne\\" \:roles [\\"admin\\"]}})" "(& {\\"admin\\" {\:username \\"admin\\" \:password \\"$2a$10$v3h/8w2OXf4HjWtzjXCNdeBHm9OUo0SiZv4BJuR15aDCqYN5fZKne\\" \:roles [\\"admin\\"]}})" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)\\r\\n\\r\\n\\r\\n;;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n;;fetch users from database\\r\\n(def users (atom \\r\\n             (string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:user}))))\\r\\n\\r\\n(derive \:\:admin \:\:user)\\r\\n\\r\\n;;initial admin username \\"admin\\", password \\"pass\\"\\r\\n(defn insert-admin []\\r\\n  (cm/insert\! \:users \\r\\n              {\\"admin\\" {\:username \\"admin\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\\"admin\\"}}}))\\r\\n\\r\\n\\r\\n;;check if user exists in fetched users\\r\\n(defn user-exists? [username] \\r\\n  (if (not\= 0 (count \\r\\n                (filter not-empty \\r\\n                        (cm/fetch \:users \:only {\:_id false (keyword username) true})))) true false))\\r\\n\\r\\n\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n(defn insert-user [username password roles]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {username {\:username username\\r\\n                            \:password (creds/hash-bcrypt password)\\r\\n                            \:roles \#{roles}}})))\\r\\n\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:user})))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (filter not-empty (cm/fetch \:users \:only {\:_id false (keyword username) true})))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "\:\:users/admin" "users" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)\\r\\n\\r\\n\\r\\n;;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n;;fetch users from database\\r\\n(def users (atom \\r\\n             (string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:user}))))\\r\\n\\r\\n(derive \:\:admin \:\:user)\\r\\n\\r\\n;;initial admin username \\"admin\\", password \\"pass\\"\\r\\n(defn insert-admin []\\r\\n  (cm/insert\! \:users \\r\\n              {\\"admin\\" {\:username \\"admin\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\\"admin\\"}}}))\\r\\n\\r\\n\\r\\n;;check if user exists in fetched users\\r\\n(defn user-exists? [username] \\r\\n  (if (not\= 0 (count \\r\\n                (filter not-empty \\r\\n                        (cm/fetch \:users \:only {\:_id false (keyword username) true})))) true false))\\r\\n\\r\\n\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n(defn insert-user [username password roles]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {username {\:username username\\r\\n                            \:password (creds/hash-bcrypt password)\\r\\n                            \:roles \#{roles}}})))\\r\\n\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:user})))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (filter not-empty (cm/fetch \:users \:only {\:_id false (keyword username) true})))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "users" "(insert-admin)" "users" "(insert-user \\"user\\" \\"pass\\" \\"user\\")" "user" "users" "(string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users))))" "(into {} \\r\\n                                  (cm/fetch \:users))" "(cm/fetch \:users))" "(cm/fetch \:users)" "(into {} (cm/fetch \:users))" "users" "(cm/fetch \:users \:only {\:_id false})" "(keys (cm/fetch \:users \:only {\:_id false}))" "(keys (into {} (cm/fetch \:users \:only {\:_id false})))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:body post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:body \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.middleware.session.store \:as ringstore]\\r\\n             [somnium.congomongo.coerce \:as coerce]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))" "(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div\#page-content-wrapper] (html/content (\:content post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:post \\"Functional programming\!\\"})" ";;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  \\"This page can only be seen by administrators.\\"))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @local-users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(defonce server (jetty/run-jetty \#'app {\:port 8080 \:join false}))" "(.stop @server)" "(server)" "(.stop server.clj-db)" "(.start server.clj-db)" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(.stop server)" "(.start server)" "(.stop server)" "(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.page-content-wrapper] (html/content (\:content post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:content \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  (get-page \\"template.html\\" sample-post)))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @local-users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))\\r\\n\\r\\n(html/defsnippet index-template \\"public/index.html\\"\\r\\n  [\:header]\\r\\n  [heading navigation-elements]\\r\\n  [\:h1] (html/content heading)\\r\\n  [\:ul [\:li html/first-of-type]] (html/clone-for [[caption url] navigation-elements]\\r\\n                                                 [\:li \:a] (html/content caption)\\r\\n                                                 [\:li \:a] (html/set-attr \:href url)))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))" "(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:content post))))" "(.stop server)" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:content post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:content \\"Functional programming\!\\"})" ";;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin}  (get-page \\"template.html\\" sample-post)))\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @local-users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))\\r\\n\\r\\n;; Define the template\\r\\n(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:content post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:content \\"Functional programming\!\\"})" "(.stop server)" "s" "main-template" "(print main-template)" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))" "(defn get-page [page post]\\r\\n  (html/deftemplate template-page page\\r\\n  [post]\\r\\n  [\:title] (html/content (\:title post))\\r\\n  [\:h1] (html/content (\:title post))\\r\\n  [\:span.author] (html/content (\:author post))\\r\\n  [\:div.post-body] (html/content (\:content post))))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:content \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (get-page \\"public/index.html\\" sample-post)))\\r\\n  (GET \\"/admin\\" request\\r\\n       (friend/authorize \#{\:\:users/admin} main-template) )\\r\\n  (GET \\"/login\\" [] (get-page \\"public/login.html\\" sample-post))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @local-users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(clojure.pprint main-template)" "main-template" "(main-template)" "(template-page)" "(get-page \\"public/index.html\\" sample-post)" "(template-page \\"public/index.html\\")" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]))\\r\\n\\r\\n;; Define the template\\r\\n  (html/deftemplate template-page \\"public/index.html\\"\\r\\n  []\\r\\n    [\:title] (html/content  \\"Funckiopnalno\\")\\r\\n  [\:div.post-body] (html/content  \\"Opaopaopaas\\"))\\r\\n\\r\\n;; Some sample data\\r\\n(def sample-post {\:author \\"Aleksandar Vidakovic\\"\\r\\n                  \:title \\"Clojure Beer\\"\\r\\n                  \:content \\"Functional programming\!\\"})\\r\\n\\r\\n;;(reduce str (template-page sample-post))\\r\\n\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (template-page)))\\r\\n (GET \\"/admin\\" request\\r\\n       \\"Login\\" )\\r\\n  (GET \\"/login\\" [] (template-page))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @local-users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "  (html/deftemplate template-page \\"public/index.html\\"\\r\\n  [\:header]\\r\\n    [tes]\\r\\n  [\:title] (html/content  \\"Welcome to beer rating site.\\")\\r\\n  [\:ul.beers[\:li html/first-of-type]] (html/clone-for [[a b] tes]\\r\\n                                                 [\:li \:a] (html/content a)\\r\\n                                                 [\:li \:a] (html/set-attr \:href b)))" "(template-page '(1 2 3 4))" "(template-page {2 3 4 4})" "(template-page {\:a 1 \:b 3 \:c 3})" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(cm/mongo\! \:db \\"beerdb\\")" "(get-column-names)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(template-page ds/get-column-names)" "(ds/get-column-names)" "(vals ds/get-column-names)" "(defn get-all-reviews [n]\\r\\n  \\"Return n user reviews (beer & score pairs for n users).\\"\\r\\n  (for [u (take n allusers)] \\r\\n    (hash-map u \\r\\n      (apply hash-map \\r\\n         (flatten (map vals \\r\\n                       (cm/fetch \:beer_data \:only\\r\\n                                 {\:_id false \\r\\n                                  \:beer_name true \\r\\n                                  \:review_overall true} \\r\\n                                 \:where \\r\\n                                 {\:review_profileName u})))))))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (template-page test)))\\r\\n (GET \\"/admin\\" request\\r\\n       \\"Login\\" )\\r\\n  (GET \\"/login\\" [] (template-page ds/get-all-reviews 5))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (template-page test)))\\r\\n (GET \\"/admin\\" request\\r\\n       \\"Login\\" )\\r\\n  (GET \\"/login\\" [] (template-page ds/get-all-reviews 5))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(template-page (map keys (ds/get-all-reviews 1)))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(get-column-names)" "(fetch-data-for-user \\"stcules\\")" "(get-reviews-by-user \\"stcules\\")" "(into [] (get-reviews-by-user \\"stcules\\"))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(def things [\\"one\\" \\"two\\" \\"three\\" \\"four\\"])" "things" "(reduce str (into [] (ds/get-reviews-by-user \\"stcules\\")))" "(map str (into [] (ds/get-reviews-by-user \\"stcules\\")))" "(ds/get-reviews-by-user \\"stcules\\")" "(keys (ds/get-reviews-by-user \\"stcules\\"))" "(into [] (keys (ds/get-reviews-by-user \\"stcules\\")))" "local-users" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(show-adminu)" "(defn get-column-names []\\r\\n  \\"Get column names for existing dataset.\\"\\r\\n  (core/col-names beer-data))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(get-column-names)" "allbeers" "(count allbeers)" "(sort allbeers)" "(sorted? allbeers)" "(sort str allbeers)" "(sort \#(compare (str/upper-case %1) (str/upper-case %2)) allbeers)" "(require [clojure.contrib.string \:as str])" "(sort < allbeers)" "(sort-by allbeers)" "(sort-by str allbeers)" "(count (into [](sort-by str ds/allbeers)))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(count (into [](sort-by str ds/allbeers)))" "(html/emit* \\r\\n                                          (show (into [] \\r\\n                                                      (sort-by str ds/allbeers))))" "(show (into [] \\r\\n                                                         (sort-by str ds/allbeers)))" "(seq? ds/allbeers)" "(for [x ds/allbeers]\\n  (print x))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(def allbeers \\r\\n  (distinct (flatten (map vals \\r\\n                          (cm/fetch \\r\\n                            \:beer_data \:only\\r\\n                            {\:_id false\\r\\n                             \:beer_name true})))))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(get-column-names)" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(show (into [] \\r\\n                                                      (sort-by str ds/allbeers)))" "(into [] \\r\\n                                                         (sort-by str ds/allbeers))" "((into [] \\r\\n                                                         (sort-by str ds/allbeers)))" "(count (into [] \\r\\n                                                         (sort-by str ds/allbeers)))" "(for [x ds/allbeers]\\n  println x)" "(for [x ds/allbeers]\\r\\n     (println x))" "(for [x (into [] \\r\\n                                                      (sort-by str ds/allbeers))]\\n  (println x))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(def beer-data (db/fetch-dataset \:beer_data))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(def data\\r\\n  (io/read-dataset\\r\\n   \\"xaa.csv\\"\\r\\n   \:header true \:delim \\\\,))" "(cm/mass-insert\! \:beer_data (\:rows data))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(cm/set-connection\! connection)" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" ";;change keywords to strings, because of cemerick.friend required formated data\\r\\n(defn string-keys [m]\\r\\n  (into (empty m) (for [[k v] m] [(name k) v])))\\r\\n\\r\\n;;fetch users from database\\r\\n;;not working\!\!\!\!\!\!\!\!\\r\\n(def users (atom \\r\\n             (string-keys \\r\\n               (for [x (keys (into {} (cm/fetch \:users \:only {\:_id false})))]\\r\\n                 (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [x \:roles] \#{\:\:user})))))\\r\\n\\r\\n(derive \:\:admin \:\:user)\\r\\n\\r\\n;;initial admin username \\"admin\\", password \\"pass\\"\\r\\n(defn insert-admin []\\r\\n  (cm/insert\! \:users \\r\\n              {\\"admin\\" {\:username \\"admin\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\\"admin\\"}}}))\\r\\n\\r\\n\\r\\n;;check if user exists in fetched users\\r\\n(defn user-exists? [username] \\r\\n  (if (not\= 0 (count \\r\\n                (filter not-empty \\r\\n                        (cm/fetch \:users \:only {\:_id false (keyword username) true})))) true false))\\r\\n\\r\\n\\r\\n  \\r\\n;;insert data for the user into db - collection users\\r\\n(defn insert-user [username password roles]\\r\\n  \\"Insert new user under condition that there isn't another one with same username.\\"\\r\\n  (if-not (user-exists? username)\\r\\n    (cm/insert\! \:users\\r\\n           {username {\:username username\\r\\n                            \:password (creds/hash-bcrypt password)\\r\\n                            \:roles \#{roles}}})))\\r\\n\\r\\n\\r\\n;;get all users in users collection \\r\\n(defn get-all-users []\\r\\n  (string-keys \\r\\n               (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:user})))\\r\\n\\r\\n;;get user by supplied username\\r\\n(defn get-user [username]\\r\\n  (filter not-empty (cm/fetch \:users \:only {\:_id false (keyword username) true})))\\r\\n\\r\\n;;delete user with supplied username\\r\\n(defn delete-user [username]\\r\\n  \\"Delete user with supplied username.\\"\\r\\n  (cm/destroy\! \:users {\:username username}))\\r\\n\\r\\n\\r\\n;;disconnect\\r\\n(defn disconnect [conn]\\r\\n  \\"Disconnect from database.\\"\\r\\n  (cm/close-connection conn))\\r\\n\\r\\n\\r\\n\\r\\n(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))\\r\\n\\r\\n(derive \:\:admin \:\:user)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(defn show [things]\\r\\n  (html/at (html/html-resource \\"public/index.html\\")\\r\\n      [\:select.beers [\:option html/first-of-type]] \\r\\n      (html/clone-for [thing things] (html/content thing))))\\r\\n\\r\\n(defn show-login []\\r\\n  (html/at (html/html-resource \\"public/login.html\\")))\\r\\n\\r\\n\\r\\n(defn show-adminb []\\r\\n  (html/at (html/html-resource \\"public/adminb.html\\")))\\r\\n\\r\\n(defn show-adminu []\\r\\n  (html/at (html/html-resource \\"public/adminu.html\\")))\\r\\n\\r\\n(defn show-about []\\r\\n  (html/at (html/html-resource \\"public/about.html\\")))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(keyword? \:user (cm/fetch-one \:users \:only {\:_id false}))" "(for [x (into {} (cm/fetch \:users \:only {\:_id false}))]\\n  if" "(into {} (cm/fetch \:users \:only {\:_id false}))" "(key (into {} (cm/fetch \:users \:only {\:_id false})))" "(keys (into {} (cm/fetch \:users \:only {\:_id false})))" "(for [x (keys (into {} (cm/fetch \:users \:only {\:_id false})))]\\r\\n                 (assoc-in (into {} \\r\\n                               (cm/fetch \:users \:only {\:_id false})) [\:user \:roles] \#{\:\:user}))" "(for [x (keys (into {} (cm/fetch \:users \:only {\:_id false})))] (println x))" "(find (into {} (cm/fetch \:users \:only {\:_id false})) \:user)" "(find (into {} (cm/fetch \:users \:only {\:_id false})) \:roles)" "(get-in (into {} (cm/fetch \:users \:only {\:_id false})) [\:user \:roles])" "(\= \\"user\\" (get-in (into {} (cm/fetch \:users \:only {\:_id false})) [\:user \:roles]))" "(\= [\\"user\\"] (get-in (into {} (cm/fetch \:users \:only {\:_id false})) [\:user \:roles]))" "(get-in (into {} (cm/fetch \:users \:only {\:_id false})) [\:roles])" "(\= [\\"user\\"] (get-in (cm/fetch-one \:users \:only {\:_id false}) [(key (cm/fetch-one \:users \:only {\:_id false})) \:roles]))" "(cm/fetch-one \:users \:only {\:_id false})" "(\= [\\"user\\"] (get-in (cm/fetch-one \:users \:only {\:_id false}) [(key (cm/fetch-one \:users \:only {\:_id false})) \:roles]))" "(key (cm/fetch-one \:users \:only {\:_id false}))" "(key (into {} (cm/fetch-one \:users \:only {\:_id false})))" "(into {} (cm/fetch-one \:users \:only {\:_id false}))" "(keys (into {} (cm/fetch-one \:users \:only {\:_id false})))" "(cm/fetch \:users \:only {\:_id false})" "(keys (into {} (cm/fetch \:users \:only {\:_id false})))" "(keys (into {} (cm/fetch-one \:users \:only {\:_id false})))" "(keyword? (keys (into {} (cm/fetch-one \:users \:only {\:_id false}))))" "(keyword? (keys (cm/fetch-one \:users \:only {\:_id false})))" "(keys (cm/fetch-one \:users \:only {\:_id false}))" "(key (cm/fetch-one \:users \:only {\:_id false}))" "(cm/fetch-one \:users \:only {\:_id false})" "(get-in (cm/fetch-one \:users \:only {\:_id false}))" "(cm/fetch-one \:users \:only {\:_id false})" "(val (cm/fetch-one \:users \:only {\:_id false}))" "(vals\\n  (cm/fetch-one \:users \:only {\:_id false}))" "(get-in (vals (cm/fetch-one \:users \:only {\:_id false})) [\:roles])" "(get-in (into {} (vals (cm/fetch-one \:users \:only {\:_id false}))) [\:roles])" "(get-in (into {} (val (cm/fetch-one \:users \:only {\:_id false}))) [\:roles])" "(get-in (into {} (vals (cm/fetch \:users \:only {\:_id false}))) [\:roles])" "(into {} (vals (cm/fetch \:users \:only {\:_id false})))" "(into {} (vals (cm/fetch-one \:users \:only {\:_id false})))" "(get-in (into {} (vals (cm/fetch-one \:users \:only {\:_id false})))) [\:roles]" " (get-in (into {} (vals (cm/fetch-one \:users \:only {\:_id false}))) [\:roles])" "(for [x (into {} (cm/fetch \:users \:only {\:_id false}))]\\n  (println x))" "(for [x (into {} (into {} (cm/fetch \:users \:only {\:_id false})))]\\r\\n     (println x))" "(keys (into {} (cm/fetch \:users \:only {\:_id false})))" "(into {} (cm/fetch \:users \:only {\:_id false}))" "(\:roles (into {} (cm/fetch \:users \:only {\:_id false})))" "(if (\= [\\"admin\\"] (get-in (cm/fetch \:userst \:only {\:_id false}) [\:roles])))" "(\= [\\"admin\\"] (get-in (cm/fetch \:userst \:only {\:_id false}) [\:roles]))" "(get-in (cm/fetch \:userst \:only {\:_id false}) [\:roles])" "(cm/fetch \:userst \:only {\:_id false})" "(get-in (into {} (cm/fetch \:userst \:only {\:_id false}) [\:roles]))" "(get-in (into {} (cm/fetch \:userst \:only {\:_id false}))\\n        [\:roles])" "(cm/fetch \:userst \:only {\:_id false})" "(val(cm/fetch \:userst \:only {\:_id false}))" "(vals (cm/fetch \:userst \:only {\:_id false}))" "(\:username (cm/fetch \:userst \:only {\:_id false}))" "(\:username (into {} (cm/fetch \:userst \:only {\:_id false})))" "(assoc {} (\:username (into {} (cm/fetch \:userst \:only {\:_id false}))) (into {} (cm/fetch \:userst \:only {\:_id false})))" "(let [map (into {} (cm/fetch \:userst \:only {\:_id false}))]\\r\\n               (for [x map]                \\r\\n                 (assoc {} (\:username (into {} x)) (into {} x))))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)" "into {} (cm/fetch \:userst \:only {\:_id false}))" "(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)" "(into {} (cm/fetch \:userst \:only {\:_id false}))" "(doseq [x (into {} (cm/fetch \:userst \:only {\:_id false}))]                \\r\\n                 (assoc {} (\:username (into {} x)) (into {} x)))" "(doseq [x (into {} (cm/fetch \:userst \:only {\:_id false}))]                \\r\\n                    (print x))" "(filter (fn [x] (print x) (into {} (cm/fetch \:userst \:only {\:_id false})))" "(filter (fn [x] (print x) (into {} (cm/fetch \:userst \:only {\:_id false}))))" "(into {} (cm/fetch \:userst \:only {\:_id false}))" "(doseq [x (into {} (cm/fetch \:userst \:only {\:_id false}))] (print x))" "(doseq [x (cm/fetch \:userst \:only {\:_id false})]\\n  (print x))" "(doseq [x (cm/fetch \:userst \:only {\:_id false})]\\r\\n     (println x))" "(doseq [x (cm/fetch \:userst \:only {\:_id false})]                \\r\\n                 (assoc {} (\:username (into {} x)) (into {} x)))" "(doseq [x (cm/fetch \:userst \:only {\:_id false})]                \\r\\n                    (println (assoc {} (\:username (into {} x)) (into {} x))))" "users" "(let [users {}](doseq [x (cm/fetch \:userst \:only {\:_id false})] \\n                 (assoc users (\:username (into {} x)) (into {} x))))" "(doseq [x (cm/fetch \:userst \:only {\:_id false})] \\r\\n                    (assoc {} (\:username (into {} x)) (into {} x)))" "(doseq [x (cm/fetch \:userst \:only {\:_id false})] \\r\\n                       (println (assoc {} (\:username (into {} x)) (into {} x))))" "(print users)" "(let [map (cm/fetch \:userst \:only {\:_id false})\\r\\n                 users {}]\\r\\n               (doseq [x map]                \\r\\n                 (assoc users (\:username (into {} x)) (into {} x))))" "(let [map (cm/fetch \:userst \:only {\:_id false})\\r\\n                    users {}]\\r\\n                  (for [x map]                \\r\\n                    (assoc users (\:username (into {} x)) (into {} x))))" "(get (cm/fetch-one \:userst \:only {\:_id false}) [\:roles])" "(cm/fetch-one \:userst \:only {\:_id false})" "(get (cm/fetch-one \:userst \:only {\:_id false}) \:roles)" "(\:username (cm/fetch \:userst \:only {\:_id false}))" "(cm/fetch \:userst \:only {\:_id false})" "(get-in (cm/fetch \:userst \:only {\:_id false}) \:username)" "users" "(\:roles (cm/fetch \:userst \:only {\:_id false}))" "(cm/fetch \:userst \:only {\:_id false})" "(\:roles (into {} (cm/fetch \:userst \:only {\:_id false})))" "(get (cm/fetch \:userst \:only {\:_id false}) \:roles)" "(get (cm/fetch-one \:userst \:only {\:_id false}) \:roles)" "(\:roles (into {} (cm/fetch \:userst \:only {\:_id false})))" "(assoc users (\:username (into {} (cm/fetch \:userst \:only {\:_id false}))) (into {} (cm/fetch \:userst \:only {\:_id false})))" "(assoc {} (\:username (into {} (cm/fetch \:userst \:only {\:_id false}))) (into {} (cm/fetch \:userst \:only {\:_id false})))" "users" "(\:username (into {} (cm/fetch \:userst \:only {\:_id false})))" "(\:roles (into {} (cm/fetch \:userst \:only {\:_id false})))" "(assoc users (\:roles (into {} (cm/fetch-one \:userst \:only {\:_id false}))))" "(assoc users (\:roles (into {} (cm/fetch-one \:userst \:only {\:_id false}))) \#{\:\:user})" "(assoc {} (\:roles (into {} (cm/fetch-one \:userst \:only {\:_id false}))) \#{\:\:user})" "(\:roles (into {} (cm/fetch-one \:userst \:only {\:_id false})))" "(assoc users (\:username (into {} (cm/fetch \:userst \:only {\:_id false}))) (into {} (cm/fetch \:userst \:only {\:_id false})))" "(assoc {} (\:username (into {} (cm/fetch \:userst \:only {\:_id false}))) (into {} (cm/fetch \:userst \:only {\:_id false})))" "(assoc {} (into {} (cm/fetch \:userst \:only {\:_id false})) (\:username (into {} (cm/fetch \:userst \:only {\:_id false}))))" "(assoc (into {} (cm/fetch-one \:userst \:only {\:_id false})) \:role \#{\:\:admin})" "(assoc (into {} (cm/fetch-one \:userst \:only {\:_id false})) \:roles \#{\:\:admin})" "users" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (local-users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(defn show [things]\\r\\n  (html/at (html/html-resource \\"public/index.html\\")\\r\\n      [\:select.beers [\:option html/first-of-type]] \\r\\n      (html/clone-for [thing things] (html/content thing))))\\r\\n\\r\\n(defn show-login []\\r\\n  (html/at (html/html-resource \\"public/login.html\\")))\\r\\n\\r\\n\\r\\n(defn show-adminb []\\r\\n  (html/at (html/html-resource \\"public/adminb.html\\")))\\r\\n\\r\\n(defn show-adminu []\\r\\n  (html/at (html/html-resource \\"public/adminu.html\\")))\\r\\n\\r\\n(defn show-about []\\r\\n  (html/at (html/html-resource \\"public/about.html\\")))\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/\\" request \\r\\n      (friend/authorize \#{\:\:users/user} (html/emit* \\r\\n                                          (show (into [] \\r\\n                                                      (sort-by str ds/allbeers))))))\\r\\n  (GET \\"/admin\\" request \\r\\n       (friend/authorize \#{\:\:users/admin} (html/emit* (show-adminu))))\\r\\n  (GET \\"/adminb\\" request \\r\\n       (friend/authorize \#{\:\:users/admin} (html/emit* (show-adminb))))\\r\\n  (GET \\"/about\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (html/emit* (show-about))))\\r\\n  (GET \\"/login\\" [] (html/emit* (show-login)))\\r\\n  (POST \\"/addBeer\\" request \\r\\n        (let [beer-name (get (\:params request) \:beername)]\\r\\n      (str \\"Name of the beer\: \\" beer-name)))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (handler/site\\r\\n   (friend/authenticate beer-routes\\r\\n   \\t\\t\\t{\:allow-anon? true\\r\\n         \:default-landing-uri \\"/\\"                                      \\r\\n         \:credential-fn \#(creds/bcrypt-credential-fn @local-users %)\\r\\n         \:workflows [(workflows/interactive-form)]})))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "@users" "\#{\:\:users/user}" "(def users (atom \\r\\n               (into {}(let [map (cm/fetch \:userst \:only {\:_id false})\\r\\n                 users {}]\\r\\n               (for [x map]  \\r\\n                 (if (\= [\\"user\\"] (get x \:roles))\\r\\n                 (assoc users  (\:username (into {} x)) (assoc (into {} x) \:roles \#{\:\:user}))\\r\\n                 (assoc users  (\:username (into {} x)) (assoc (into {} x) \:roles \#{\:\:admin}))))))))" "(def local-users (atom {\\"user\\" {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\:\:user}}\\r\\n                  \\"admin\\" {\:username \\"admin\\"\\r\\n                                  \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                                  \:roles \#{\:\:admin}}}))" "local-users" "users" "(\#(creds/bcrypt-credential-fn @users [\:username \\"admin\\" \:password \\"pass\\"]))" "(\#(creds/bcrypt-credential-fn server.clj-db/local-users [\:username \\"admin\\" \:password \\"pass\\"]))" "(\#(creds/bcrypt-credential-fn @local-users [\:username \\"admin\\" \:password \\"pass\\"]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [server.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns server.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(insert-admin)" "(users)" "users" "(user-exists? \\"admin\\")" "(cm/fetch \:users \:only {\:_id false (keyword \\"admin\\") true})" "(cm/fetch \:users \:only {\:_id false})" "(cm/fetch \:users \:only {\:_id false} \:where {\:username \\"admin\\"})" "(user-exists? \\"admin\\")" "(insert-user \\"user\\" \\"pass\\" \\"user\\")" "users" "(user-exists? \\"user\\")" "users" "(user-exists? \\"admin\\")" "(user-exists? \\"user\\")" "(cm/insert\! \:users \\r\\n              {\:username \\"user\\"\\r\\n                            \:password (creds/hash-bcrypt \\"pass\\")\\r\\n                            \:roles \#{\\"user\\"}})" "(user-exists? \\"user\\")" "(insert-user \\"user\\" \\"pass\\" \\"user\\")" "(get-all-users)" "(get-user \\"user\\")" "(delete-user \\"user\\")" "(update-user \\"admin\\" \\"pass\\" \\"user\\")" "(cm/fetch \:users \:where {\:username \\"admin\\"})" "(update-user \\"admin\\" \\"pass\\" \\"user\\")" "(merge (cm/fetch \:users \:where {\:username username}) {\:password \\"ludnica\\"})" "(merge (cm/fetch \:users \:where {\:username \\"admin\\"}) {\:password \\"ludnica\\"})" "(merge ((into {} cm/fetch \:users \:where {\:username \\"admin\\"}) {\:password \\"ludnica\\"}))" "(merge ((into {} (cm/fetch \:users \:where {\:username \\"admin\\"}) {\:password \\"ludnica\\"})))" "(merge (into {} (cm/fetch \:users \:where {\:username \\"admin\\"})) {\:password \\"ludnica\\"})" "(update-user \\"admin\\" \\"ludnica\\")" "(get-user \\"admin\\")" "(update-user \\"admin\\" \\"pass\\")" "(update-user \\"admin\\" \\"pass\\" \\"user\\")" "(update-user \\"admin\\" \\"pass\\" \\"admin\\")" "(get-user \\"admin\\")" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(def users (atom \\r\\n               (into {}(let [map (cm/fetch \:users \:only {\:_id false})\\r\\n                 users {}]\\r\\n               (for [x map]  \\r\\n                 (if (\= [\\"user\\"] (get x \:roles))\\r\\n                 (assoc users  (\:username (into {} x)) (assoc (into {} x) \:roles \#{\:\:user}))\\r\\n                 (assoc users  (\:username (into {} x)) (assoc (into {} x) \:roles \#{\:\:admin}))))))))" "(derive \:\:admin \:\:user)" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(html/content (\:username (into [] \\r\\n                                                      (database.clj-db/get-all-users))))" "(str (html/content (\:username (into [] \\r\\n                                                         (database.clj-db/get-all-users)))))" "(html/emit* (html/content (\:username (into [] \\r\\n                                                         (database.clj-db/get-all-users)))))" "(\:username (into [] \\r\\n                                                            (database.clj-db/get-all-users)))" "(database.clj-db/get-all-users)" "(into [] \\r\\n                                                               (database.clj-db/get-all-users))" "(for [item (into [](database.clj-db/get-all-users))]\\n  print (\:username item))" "(for [item (into [](database.clj-db/get-all-users))]\\r\\n     (print (\:username item)))" "(for [item (into [](database.clj-db/get-all-users))]\\r\\n        (print item))" "(for [item (into [](database.clj-db/get-all-users))]\\r\\n           (println item))" "(for [item (into [](database.clj-db/get-all-users))]\\r\\n              (println (\:username item)))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(cm/destroy\! \:users {\:username \\"marko\\"})" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(cm/destroy\! \:users {\:username \\"marko\\"})" "(insert-user \\"marko\\" \\"pass\\" \\"user\\")" "(\\"n\\" (cm/destroy\! \:users {\:username username}))" "(\\"n\\" (cm/destroy\! \:users {\:username \\"marko\\"}))" "(\= \\"n\\" (cm/destroy\! \:users {\:username \\"marko\\"}))" "(\:n (cm/destroy\! \:users {\:username \\"marko\\"}))" "\#<WriteResult { \\"serverUsed\\" \: \\"/127.0.0.1\:27017\\" , \\"connectionId\\" \: 11 , \\"n\\" \: 1 , \\"syncMillis\\" \: 0 , \\"writtenTo\\" \:  null  , \\"err\\" \:  null  , \\"ok\\" \: 1.0}>" "(seq? \#<WriteResult { \\"serverUsed\\" \: \\"/127.0.0.1\:27017\\" , \\"connectionId\\" \: 11 , \\"n\\" \: 1 , \\"syncMillis\\" \: 0 , \\"writtenTo\\" \:  null  , \\"err\\" \:  null  , \\"ok\\" \: 1.0}>)" "(keys (cm/destroy\! \:users {\:username username}))" "(keys (cm/destroy\! \:users {\:username \\"marko\\"}))" "(str (cm/destroy\! \:users {\:username \\"marko\\"}))" "(map str (cm/destroy\! \:users {\:username \\"marko\\"}))" "(somnium.congomongo.coerce/dbobject (cm/destroy\! \:users {\:username \\"marko\\"}))" "(somnium.congomongo.coerce/mongo->clojure (cm/destroy\! \:users {\:username \\"marko\\"}))" "(somnium.congomongo.coerce/dbobject (cm/destroy\! \:users {\:username \\"marko\\"}))" "(somnium.congomongo.coerce/ConvertibleFromMongo (cm/destroy\! \:users {\:username \\"marko\\"}))" "(extend-protocol somnium.congomongo.coerce/ConvertibleFromMongo\\n  (let [d (cm/destroy\! \:users {\:username \\"marko\\"})]\\n  (somnium.congomongo.coerce/mongo-clojure [^d date somnium.congomongo.coerce/*keywordize*] (new {} date) ))" "(extend-protocol somnium.congomongo.coerce/ConvertibleFromMongo\\r\\n     (let [d (cm/destroy\! \:users {\:username \\"marko\\"})]\\r\\n     (somnium.congomongo.coerce/mongo-clojure [^d date somnium.congomongo.coerce/*keywordize*] (new {} date) )))" "(extend-protocol somnium.congomongo.coerce/ConvertibleFromMongo\\r\\n        (let [d (cm/destroy\! \:users {\:username \\"marko\\"})]\\r\\n        (somnium.congomongo.coerce/mongo->clojure [^d date somnium.congomongo.coerce/*keywordize*] (new {} date) )))" "(extend-protocol somnium.congomongo.coerce/ConvertibleFromMongo\\r\\n           (let [Map (cm/destroy\! \:users {\:username \\"marko\\"})]\\r\\n           (somnium.congomongo.coerce/mongo->clojure [^Map m somnium.congomongo.coerce/*keywordize*] (assocs->clojure (.entrySet m) somnium.congomongo.coerce/*keywordize*) )))" "(cm/destroy\! \:users {\:username \\"marko\\"})" " (str (cm/destroy\! \:users {\:username \\"marko\\"}))" "(reduce str (cm/destroy\! \:users {\:username \\"marko\\"}))" "(into {} (cm/destroy\! \:users {\:username \\"marko\\"}))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:normal)" "(cm/destroy\! \:users {\:username \\"marko\\"})" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "allusers" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "users" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "users" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(atom? )" "@users" "(ref users)" "(deref users)" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(update-users)" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "users" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "@users" "database.clj-db/users" "(deref users)" "users" "@users" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(update-users)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "ad" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "@users" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "users" "(update-user \\"janko\\" \\"admin\\")" "users" "(update-users)" "users" "(update-user \\"janko\\" \\"user\\")" "users" "(update-users)" "users" "(update-user \\"janko\\" \\"admin\\")" "users" "(update-users)" "users" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "users" "(creds/bcrypt-credential-fn @users {\:username \\"janko\\" \:password \\"kapa\\"})" "(creds/bcrypt-credential-fn @users {\:username \\"admin\\" \:password \\"pass\\"})" "(creds/bcrypt-credential-fn @users {\:username \\"janko\\" \:password \\"kapa\\"})" "(database.clj-db/reset-password \\"janko\\" \\"kapa\\")" "(creds/bcrypt-credential-fn @users {\:username \\"janko\\" \:password \\"kapa\\"})" "(cm/fetch-one \:users \:where {\:username \\"janko\\"})" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(cm/fetch-one \:users \:where {\:username \\"janko\\"})" "(cm/update\! \:users (cm/fetch-one \:users \:where {\:username \\"janko\\"}) (merge (cm/fetch-one \:users \:where {\:username \\"janko\\"}) {\:password (creds/hash-bcrypt \\"kapa\\")}))" "(creds/bcrypt-credential-fn @users {\:username \\"janko\\" \:password \\"kapa\\"})" "(update-users)" "(creds/bcrypt-credential-fn @users {\:username \\"janko\\" \:password \\"kapa\\"})" "(reset-password \\"janko\\" \\"mare\\")" "(update-users)" "(creds/bcrypt-credential-fn @users {\:username \\"janko\\" \:password \\"mare\\"})" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(creds/bcrypt-credential-fn @users {\:username \\"janko\\" \:password \\"janez\\"})" "(database.clj-db/update-users)" "(creds/bcrypt-credential-fn @users {\:username \\"janko\\" \:password \\"janez\\"})" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "@users" "(friend/authorize \#{\:\:users/user})" "(friend/current-authentication)" "(friend/current-authentication @users)" "(GET \\"/admin\\" request \\r\\n       (friend/authorize \#{\:\:users/admin} (html/emit* (show-adminu (into [] \\r\\n                                                      (database.clj-db/get-all-users))))))" "(ring.middleware.session/wrap-session)" "(ring.middleware.session/wrap-session request)" "(\= \#{\:\:users/user} (\:roles friend/current-authentication))" "@users" "(\= \#{\:\:users/user} (\:roles friend/current-authentication))" "(\:roles friend/current-authentication)" "(friend/current-authentication)" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(insert-beer \\"Niksicko\\")" "(get-beers)" "(for [b (get-beers)]\\n  (insert-beer b))" "(cm/fetch \\r\\n                            \:beers \:only\\r\\n                            {\:_id false\\r\\n                             \:beer_name true})" "(get-beers)" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(delete-beer \\"1 A.M. Ale\\")" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            ring.middleware.session\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            ring.middleware.session\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            ring.middleware.session\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(ns database.clj-db\\r\\n   (\:require [somnium.congomongo \:as cm]\\r\\n             [cemerick.friend.credentials \:as creds]\\r\\n             [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            ring.middleware.session\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]))" "(ns clojure-beer.metrics\\r\\n  (\:use [input.csv-dataset \:as csv]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(get-all-reviews)" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(ns clojure-beer.metrics\\r\\n  (\:use [input.csv-dataset \:as csv]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(ns clojure-beer.metrics\\r\\n  (\:use [input.csv-dataset \:as csv]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]\\r\\n            [clojure-beer.metrics \:as metrics]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]\\r\\n            [clojure-beer.metrics \:as metrics]))\\r\\n\\r\\n\\r\\n(defn show-index [user beers]\\r\\n  (html/at (html/html-resource \\"public/index.html\\")\\r\\n      [\:select.selectpicker [\:option html/first-of-type]] \\r\\n      (html/clone-for [beer beers] (html/content beer))\\r\\n      [\:h3\#current-user] (html/content user)))\\r\\n\\r\\n(defn show-login []\\r\\n  (html/at (html/html-resource \\"public/login.html\\")))\\r\\n\\r\\n\\r\\n(defn show-adminb [beers]\\r\\n  (html/at (html/html-resource \\"public/adminb.html\\")\\r\\n           [\:select.selectpicker [\:option html/first-of-type]]\\r\\n           (html/clone-for [beer beers] (html/content beer))))\\r\\n\\r\\n(defn show-adminu [users]\\r\\n  (html/at (html/html-resource \\"public/adminu.html\\")\\r\\n           [\:table \:tbody \:tr]\\r\\n           (html/clone-for [user users]                           \\r\\n                           [\:td\#un] (html/content (\:username user))\\r\\n                           [\:td\#rl] (html/content (\:roles user)))))\\r\\n\\r\\n(defn show-about []\\r\\n  (html/at (html/html-resource \\"public/about.html\\")))\\r\\n\\r\\n(defn show-recommendations [user reviewers]\\r\\n  (html/at (html/html-resource \\"public/recommendations.html\\")\\r\\n           [\:h3\#current-user] (html/content user)\\r\\n           [\:ol.buddies-list [\:li html/first-of-type]]\\r\\n           (html/clone-for [reviewer reviewers] (html/content reviewer))))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]\\r\\n            [clojure-beer.metrics \:as metrics]))" "(for [n (metrics/similar-users (into {} (ds/get-all-reviews 10)) (ds/get-reviews-by-user \\"stcules\\"))]\\n  (println (str n)))" "(for [n (metrics/similar-users (into {} (ds/get-all-reviews 10)) (ds/get-reviews-by-user \\"stcules\\"))]\\r\\n     (println (reduce str n)))" "(for [n (metrics/similar-users (into {} (ds/get-all-reviews 10)) (ds/get-reviews-by-user \\"stcules\\"))]\\r\\n        (println (apply str (interpose \\" \\" n)) ))" "(for [n (metrics/similar-users (into {} (ds/get-all-reviews 10)) (ds/get-reviews-by-user \\"stcules\\"))]\\r\\n           (into [] (apply str (interpose \\" \\" n)) ))" "(for [n (metrics/similar-users (into {} (ds/get-all-reviews 10)) (ds/get-reviews-by-user \\"stcules\\"))]\\r\\n              (println (apply str (interpose \\" \\" n)) ))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]\\r\\n            [clojure-beer.metrics \:as metrics]))" "(metrics/similar-users (into {} (ds/get-all-reviews 10)) (ds/get-reviews-by-user \\"stcules\\"))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]\\r\\n            [clojure-beer.metrics \:as metrics]))" "(metrics/similar-users (into {} (ds/get-all-reviews 100)) (ds/get-reviews-by-user \\"stcules\\"))" "(metrics/similar-users (into {} (ds/get-all-reviews 10)) (ds/get-reviews-by-user \\"stcules\\"))" "(\:ipazilla (into {} (get-all-reviews 20)))" "(into {} (get-all-reviews 20))" "(into {} (ds/get-all-reviews 20))" "(ns clojure-beer.metrics\\r\\n  (\:use [input.csv-dataset \:as csv]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(into {} (ds/get-all-reviews 20))" "(into {} (get-all-reviews 20))" "(\:thecarster1 (into {} (get-all-reviews 20)))" "(\\"thecarster1\\" (into {} (get-all-reviews 20)))" "(get (into {} (get-all-reviews 20)) \\"thecarster1\\")" "(get (into {} (get-all-reviews 20)) \\"bla\\")" "(csv/get-reviews-by-user \\"stcules\\")" "(get-reviews-by-user \\"stcules\\")" "(for [reviews (into {} (get-all-reviews 10))]\\n  (print reviews))" "(for [reviews (into {} (get-all-reviews 2))]\\r\\n     (into {} reviews))" "(into {} (get-all-reviews 2))" "(for [reviews (into {} (get-all-reviews 1))]\\r\\n        (print reviews))" "(key (into {} (get-all-reviews 1)))" "(for [reviews (into {} (get-all-reviews 1))]\\r\\n           (print (first reviews)))" "(into {} (get-all-reviews 2))" "(get (into {} (get-all-reviews 2) \\"beernut7\\"))" "(get (into {} (get-all-reviews 2)) \\"beernut7\\")" "(first (get (into {} (get-all-reviews 2)) \\"beernut7\\"))" "(keys (get (into {} (get-all-reviews 2)) \\"beernut7\\"))" "(for [reviews (into {} (get-all-reviews n))]\\n  (for [item reviews]\\n    (println item)))" "(for [reviews (into {} (get-all-reviews 2))]\\r\\n     (for [item reviews]\\r\\n       (println item)))" "(for [reviews (into {} (get-all-reviews 2))]\\r\\n        (for [item reviews]\\r\\n          (println (second item))))" "(for [reviews (into {} (get-all-reviews 2))]\\r\\n             (println (second reviews)))" "(for [reviews (into {} (get-all-reviews 1))]\\r\\n                (println (second reviews)))" "(for [reviews (into {} (get-all-reviews 1))]\\r\\n                   (println (first (second reviews))))" "(for [reviews (into {} (get-all-reviews 1))]\\r\\n                      (println (keys (second reviews))))" "(for [reviews (into {} (get-all-reviews 1))]\\r\\n                          (keys (second reviews)))" "(into {} (flatten (for [reviews (into {} (get-all-reviews 1))]\\r\\n                             (keys (second reviews)))))" "(flatten (for [reviews (into {} (get-all-reviews 1))]\\r\\n                                (keys (second reviews))))" "(for [reviews (into {} (get-all-reviews 1))]\\r\\n                                   (keys (second reviews)))" "(for [reviews (into {} (get-all-reviews 1))]\\n  reviews)" "(for [reviews (into {} (get-all-reviews 1))]\\r\\n     (for [item reviews]\\n       (item)))" "(for [reviews (into {} (get-all-reviews 1))]\\r\\n        (for [item reviews]\\r\\n         item))" "(get (into {} (get-all-reviews 2)) \\"beernut7\\")" "(for [reviews (into {} (get-all-reviews 1))]\\r\\n           (for [item reviews]\\r\\n            item))" "(keys (into {} (get-all-reviews 1)))" "(csv/get-reviews-by-user \\"beernut7\\")" "(ns clojure-beer.metrics\\r\\n  (\:use [input.csv-dataset \:as csv]))" "(csv/get-reviews-by-user \\"beernut7\\")" "(keys (csv/get-reviews-by-user \\"beernut7\\"))" "(\\"Centennial Steam Beer\\" (csv/get-reviews-by-user \\"beernut7\\"))" "(get (csv/get-reviews-by-user \\"beernut7\\") \\"Centennial Steam Beer\\")" "(get-recommended-beers \\"stcules\\" 10)" "(contains? (keys (csv/get-reviews-by-user \\"beernut7\\")) \\"Centennial Steam Beer\\")" "(keys (csv/get-reviews-by-user \\"beernut7\\"))" "(contains? (csv/get-reviews-by-user \\"beernut7\\"))" "(contains? (csv/get-reviews-by-user \\"beernut7\\") \\"Centennial Steam Beer\\")" "(get-recommended-beers \\"stcules\\" 10)" "(get-recommended-beers \\"stcules\\" 5)" "(for [other (keys (into {} (get-all-reviews n)))]\\n  (let [similarity (euclidean-distance (csv/get-reviews-by-user other) (csv/get-reviews-by-user person))\\r\\n          totals {}\\r\\n          simSums {}]\\n    (println similarity)))" "(for [other (keys (into {} (get-all-reviews 5)))]\\r\\n     (let [similarity (euclidean-distance (csv/get-reviews-by-user other) (csv/get-reviews-by-user \\"stcules\\"))\\r\\n             totals {}\\r\\n             simSums {}]\\r\\n       (println similarity)))" "(for [other (keys (into {} (get-all-reviews n)))] \\n  (for [beer (keys (csv/get-reviews-by-user other))]\\n    (println beer)))" "(for [other (keys (into {} (get-all-reviews 2)))] \\r\\n     (for [beer (keys (csv/get-reviews-by-user other))]\\r\\n       (println beer)))" "(for [other (keys (into {} (get-all-reviews 2)))] \\r\\n        (for [beer (keys (csv/get-reviews-by-user other))]\\r\\n          (merge (totals beer) (+ (totals beer) (* (get (csv/get-reviews-by-user \\"stcules\\") beer) 0.5)))))" "(merge {} (\:a 1))" "(merge {} {\:a 1})" "(def tot {})" "(merge (tot \\"marko\\") (+ 1 1))" "({\:marko 3} \\"marko\\")" "({\\"marko\\" 3} \\"marko\\")" "(merge ({\\"marko\\" 3} \\"marko\\") (hash-map \\"marko\\" (+ ({\\"marko\\" 3} \\"marko\\") 6))" "(merge ({\\"marko\\" 3} \\"marko\\") (hash-map \\"marko\\" (+ ({\\"marko\\" 3} \\"marko\\") 6)))" "(hash-map \\"marko\\" (+ ({\\"marko\\" 3} \\"marko\\") 6))" "(get-recommended-beers \\"stcules\\" 5)" "(into {} (hash-map \\"asdad\\" 0))" "(get-recommended-beers \\"stcules\\" 2)" "(keys (into {} (get-all-reviews 2)))" "(get-recommended-beers \\"stcules\\" 10)" "(keys (into {} (get-all-reviews 10)))" "(euclidean-distance (csv/get-reviews-by-user \\"corby112\\") (csv/get-reviews-by-user \\"stcules\\"))" "(get-recommended-beers \\"stcules\\" 10)" "(keys (csv/get-reviews-by-user \\"corby112\\")" "(keys (csv/get-reviews-by-user \\"corby112\\"))" "(get-recommended-beers \\"stcules\\" 10)" "(keys (csv/get-reviews-by-user \\"corby112\\"))" "(for [kk (keys (csv/get-reviews-by-user \\"corby112\\"))]\\n  (println kk))" "(get-recommended-beers \\"stcules\\" 10)" "(get-recommended-beers \\"ipazilla\\" 10)" "(get-recommended-beers \\"ipazilla\\" 5)" "(get-recommended-beers \\"stcules\\" 20)" "(get-recommended-beers \\"stcules\\" 6)" "(get-recommended-beers \\"stcules\\" 8)" "(get-recommended-beers \\"stcules\\" 100)" "(get-recommended-beers \\"stcules\\" 5)" "(get-recommended-beers \\"stcules\\" 100)" "(get-recommended-beers \\"stcules\\" 20)" "(def tot (atom {}))" "@tot" "(into @tot (hash-map \\"aca\\" 0))" "@tot" "(swap\! @tot (hash-map \\"aca\\" 0))" "(swap\! tot (hash-map \\"aca\\" 0))" "@tot" "(swap\! tot \\"aca\\" 0)" "(swap\! tot assoc \\"aca\\" 0)" "@tot" "(@tot \\"aca\\")" "(get-recommended-beers \\"stcules\\" 20)" "(get-recommended-beers \\"stcules\\" 5)" "(csv/get-reviews-by-user \\"pschul4\\")" "(contains? (csv/get-reviews-by-user \\"pschul4\\") \\"Sierra Nevada Bigfoot Barleywine Style Ale\\")" "(contains? (csv/get-reviews-by-user \\"stcules\\") \\"Sierra Nevada Bigfoot Barleywine Style Ale\\")" "(get-recommended-beers \\"stcules\\" 10)" "(get-recommended-beers \\"stcules\\" 3)" "(get-recommended-beers \\"stcules\\" 6)" "(get-recommended-beers \\"stcules\\" 100)" "wqe" "(get-recommended-beers \\"stcules\\" 10)" "(get-recommended-beers \\"stcules\\" 6)" "(get-recommended-beers \\"stcules\\" 7)" "(get-recommended-beers \\"stcules\\" 6)" "(get-recommended-beers \\"stcules\\" 5)" "(get-recommended-beers \\"stcules\\" 6)" "(get-recommended-beers \\"beernut7\\" 6)" "(get-recommended-beers \\"beernut7\\" 10)" "(get-recommended-beers \\"beernut7\\" 3)" "(get-recommended-beers \\"beernut7\\" 4)" "(get-recommended-beers \\"beernut7\\" 8)" "(get-recommended-beers \\"beernut7\\" 7)" "(filter \#(<\= 0 (second %)) (similar-users (into {} (get-all-reviews 20)) (get-reviews-by-user \\"phishisphunk\\")))" "(filter \#(\= 0 (second %)) (similar-users (into {} (get-all-reviews 20)) (get-reviews-by-user \\"phishisphunk\\")))" "(filter \#(>\= 0 (second %)) (similar-users (into {} (get-all-reviews 20)) (get-reviews-by-user \\"phishisphunk\\")))" "(filter \#(<\= 0 (second %)) (similar-users (into {} (get-all-reviews 20)) (get-reviews-by-user \\"phishisphunk\\")))" "(filter \#(not\= 0 (second %)) (similar-users (into {} (get-all-reviews 20)) (get-reviews-by-user \\"phishisphunk\\")))" "(ns clojure-beer.metrics\\r\\n  (\:use [input.csv-dataset \:as csv]))" "(ns input.csv-dataset\\r\\n  (\:require [incanter.core \:as core]\\r\\n        [incanter.io \:as io]\\r\\n        [somnium.congomongo \:as cm]\\r\\n        [incanter.mongodb \:as db]\\r\\n        [ring.util.response \:as resp]))" "(ns clojure-beer.metrics\\r\\n  (\:use [input.csv-dataset \:as csv]))" "(similar-users (into {} (get-all-reviews 20)) (get-reviews-by-user \\"phishisphunk\\"))" "(filter-zero-similarity (similar-users (into {} (get-all-reviews 20)) (get-reviews-by-user \\"phishisphunk\\")))" "(weighted-scores (filter-zero-similarity (similar-users (into {} (get-all-reviews 20)) (get-reviews-by-user \\"phishisphunk\\"))) \\"phishisphunk\\" 20)" "(totals (weighted-scores (filter-zero-similarity (similar-users (into {} (get-all-reviews 20)) (get-reviews-by-user \\"phishisphunk\\"))) \\"phishisphunk\\" 20))" "(compare-user-to-others 20 \\"phishisphunk\\")" "(reverse (sort-by second (compare-user-to-otherst (get-reviews-by-user \\"phishisphunk\\"))))" "(reverse (sort-by second (compare-user-to-otherst \\"phishisphunk\\")))" "(reverse (sort-by second (compare-user-to-otherst 20 \\"phishisphunk\\")))" "(similar-users 20 \\"phishisphunk\\")" "(sort-filter-similar-users 20 \\"phishisphunk\\")" "(sort-filter-similar-users \\"phishisphunk\\" 20)" "(recommend \\"phishisphunk\\")" "(sort-by second (recommend \\"phishisphunk\\"))" "(count (recommend \\"phishisphunk\\"))" "(take 10 (recommend \\"phishisphunk\\"))" "(take 10 (vals (recommend \\"phishisphunk\\")))" "(take 10 (keys (recommend \\"phishisphunk\\")))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]\\r\\n            [clojure-beer.metrics \:as metrics]))" "(metrics/recommend \\"stcules\\")" "(into [] (metrics/sort-filter-similar-users \\"stcules\\"))" "(html/clone-for [reviewer (into [] (metrics/sort-filter-similar-users \\"stcules\\"))] (html/content (apply str (interpose \\" \\" reviewer))))" "(html/emit* (html/clone-for [reviewer (into [] (metrics/sort-filter-similar-users \\"stcules\\"))] (html/content (apply str (interpose \\" \\" reviewer)))))" "(into [] (metrics/sort-filter-similar-users \\"stcules\\"))" "(into [] (metrics/recommend \\"stcules\\"))" "(metrics/sort-filter-similar-users \\"stcules\\")" "(take 10 (into [] (metrics/recommend \\"stcules\\")))" "(into [] (map \#(into [] (vals %)) (take 10 (into [] (metrics/recommend \\"stcules\\")))))" "(map into [] (take 10 (into [] (metrics/recommend \\"stcules\\"))))" "(map into [] (take 10 (metrics/recommend \\"stcules\\")))" "(into [] (take 10 (into {} (metrics/recommend \\"stcules\\"))))" "(take 10 (into {} (metrics/recommend \\"stcules\\")))" "(take 10 (metrics/recommend \\"stcules\\"))" "(ns clojure-beer.metrics\\r\\n  (\:use [input.csv-dataset \:as csv]))" "(take 10 (recommend \\"phishisphunk\\"))" "(ns views.template\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]\\r\\n            [clojure-beer.metrics \:as metrics]))" "(ns views.routing\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:as jetty]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]\\r\\n            [clojure-beer.metrics \:as metrics]\\r\\n            [views.templates \:as templates]))" "(ns views.routing\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:only [run-jetty]]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-db \:as users \:refer (users)]\\r\\n            [input.csv-dataset \:as ds]\\r\\n            [clojure-beer.metrics \:as metrics]\\r\\n            [views.templates \:as templates]))" "(ns start\\r\\n  (\:require [views.routing \:as route]))" "(ns clojure-beer.metrics\\r\\n  (\:use [database.clj-dbbeers \:only [get-reviews-by-user get-all-reviews]]))" "(ns start\\r\\n  (\:require [views.routing \:as route]\\r\\n            [somnium.congomongo \:as cm]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)" "(defn euclidean-distance [person1 person2]\\r\\n  \\"Get euclidean distance for two specified persons (usernames).\\"\\r\\n  (let [shared-items (filter person1 (keys person2))\\r\\n        score (reduce (fn [score beer]\\r\\n                        (let [score1 (person1 beer)\\r\\n                              score2 (person2 beer)]\\r\\n                          (+ score (Math/pow (- score1 score2) 2))))\\r\\n                      0 shared-items)]\\r\\n    (if (\= (count shared-items) 0)\\r\\n      0\\r\\n      (/ 1 (+ 1 score)))))\\r\\n\\r\\n\\r\\n;;test\\r\\n;;(euclidean-distance (csv/get-reviews-by-user \\"johnmichaelsen\\") (csv/get-reviews-by-user \\"stcules\\"))\\r\\n\\r\\n;;anonymous function with two params, the second is destructured\\r\\n(defn similar-users [person]\\r\\n  (let [person-score (database.clj-dbbeers/get-reviews-by-user person)\\r\\n        data (into {} (database.clj-dbbeers/get-all-reviews 20))]\\r\\n  (reduce (fn[k v]\\r\\n    (let [name (first v)\\r\\n          score (second v)\\r\\n          similarity (euclidean-distance person-score score)]\\r\\n              (assoc k name similarity) )) {} data)))\\r\\n\\r\\n;;return similar users without zero similarity to one supplied, from limited dataset\\r\\n(defn sort-filter-similar-users [person]\\r\\n  (filter \\r\\n   \#(not\= 0 (second %))\\r\\n   (reverse (sort-by second (similar-users person)))))\\r\\n\\r\\n;;test\\r\\n;;(sort-filter-similar-users \\"phishisphunk\\")\\r\\n\\r\\n;;beer recommendations\\r\\n\\r\\n(defn weighted-scores [similarity person]\\r\\n  (let [data (into {} (get-all-reviews 20))]\\r\\n    (reduce \\r\\n     (fn [k v]\\r\\n       (let [other (first v) score (second v)\\r\\n             diff (filter \#(not (contains? (data person) (key %))) (data other))\\r\\n             weighted-score (apply hash-map\\r\\n                                  (interleave (keys diff) \\r\\n                                              (map \#(* % score) (vals diff))))]\\r\\n         (assoc k other weighted-score))) {} similarity)))\\r\\n\\r\\n;;test\\r\\n;;(weighted-scores (sort-filter-similar-users \\"phishisphunk\\") \\"phishisphunk\\")\\r\\n\\r\\n(defn totals [data]\\r\\n  (reduce (fn [k v] (merge-with \#(+ %1 %2) k v)) {} (vals data)))\\r\\n\\r\\n;;(totals (weighted-scores (sort-filter-similar-users \\"phishisphunk\\") \\"phishisphunk\\"))\\r\\n\\r\\n\\r\\n(defn sum-sims [weighted-scores scores similar-users]\\r\\n  (reduce (fn [k v]\\r\\n            (let [beer (first v)\\r\\n                  rated-users (reduce \\r\\n                               (fn [k v] (if (contains? (val v) beer) \\r\\n                                          (conj k (key v)) k)) \\r\\n                               [] weighted-scores)\\r\\n                  similarities (apply + (map \#(similar-users %) rated-users))]\\r\\n              (assoc k beer similarities) ) ) {} scores))\\r\\n\\r\\n(defn recommend [person]\\r\\n  (let [similar-users (into {} (sort-filter-similar-users person))\\r\\n        weighted-scores (weighted-scores similar-users  person)\\r\\n        scores (totals weighted-scores)\\r\\n        sims (sum-sims weighted-scores scores similar-users)]\\r\\n    (apply assoc {} (interleave (keys scores) (map \#(/ (second %) (sims (first %))) scores)))))\\r\\n\\r\\n;;(take 10 (recommend \\"phishisphunk\\"))" "(ns start\\r\\n  (\:require [views.routing \:as route]\\r\\n            [somnium.congomongo \:as cm]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)" "(ns views.routing\\r\\n  (\:use (compojure handler\\r\\n                   [core \:only (GET POST ANY defroutes) \:as compojure]))\\r\\n  (\:require [net.cgrand.enlive-html \:as html]\\r\\n            [ring.adapter.jetty \:only [run-jetty]]\\r\\n            [ring.util.response \:as resp]\\r\\n            [ring.middleware.session \:as session]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.handler \:as handler]\\r\\n            [cemerick.friend \:as friend]\\r\\n            [cemerick.friend.credentials \:as creds]\\r\\n            [cemerick.friend.workflows \:as workflows]\\r\\n            [database.clj-dbusers \:as users \:refer (users)]\\r\\n            [database.clj-dbbeers \:as dbb]\\r\\n            [clojure-beer.metrics \:as metrics]\\r\\n            [views.templates \:as templates]))\\r\\n\\r\\n;;routing\\r\\n(defroutes beer-routes\\r\\n  (GET \\"/login\\" [] (html/emit* (templates/show-login)))\\r\\n  (GET \\"/\\" request \\r\\n      (if (\= \#{\:\:users/user} \\r\\n             (\:roles (friend/current-authentication))) \\r\\n        (resp/redirect \\"/index\\")\\r\\n        (resp/redirect \\"/admin\\")))\\r\\n\\r\\n  (GET \\"/index\\" request\\r\\n      (friend/authorize \#{\:\:users/user} (html/emit* \\r\\n                                          (templates/show-index \\r\\n                                            (\:current (friend/identity request))\\r\\n                                            (into [] \\r\\n                                                  (sort-by str (dbb/get-beers)))))))\\r\\n  (GET \\"/admin\\" request \\r\\n       (friend/authorize \#{\:\:users/admin} (html/emit* (templates/show-adminu (into [] \\r\\n                                                      (users/get-all-users))))))\\r\\n  (GET \\"/adminb\\" request \\r\\n       (friend/authorize \#{\:\:users/admin} (html/emit* \\r\\n                                          (templates/show-adminb (into [] \\r\\n                                                      (take 1000 (sort-by str (dbb/get-beers))))))))\\r\\n  (GET \\"/about\\" request \\r\\n        (html/emit* (templates/show-about)))\\r\\n  (POST \\"/addBeer\\" request \\r\\n        (let [beer (get (\:params request) \:beername)]\\r\\n      (dbb/insert-beer beer)))\\r\\n  (POST \\"/deleteBeer\\" request \\r\\n        (let [beer (get (\:params request) \:beername)]\\r\\n      (dbb/delete-beer beer)))\\r\\n  (POST \\"/addUser\\" request \\r\\n        (let [username (get (\:params request) \:username)\\r\\n              password (get (\:params request) \:password)\\r\\n              role (get (\:params request) \:role)]\\r\\n      (do\\r\\n        (users/insert-user username password role)\\r\\n        (users/update-users))))\\r\\n   (POST \\"/editUser\\" request \\r\\n        (let [username (get (\:params request) \:username)\\r\\n             role (get (\:params request) \:role)]\\r\\n      (do (users/update-user username role)\\r\\n        (users/update-users))))\\r\\n   (POST \\"/deleteUser\\" request \\r\\n        (let [username (get (\:params request) \:username)]\\r\\n        (users/delete-user username)\\r\\n        (users/update-users)))\\r\\n   (POST \\"/reset\\" request \\r\\n        (let [username (get (\:params request) \:username)\\r\\n              password (get (\:params request) \:password)]\\r\\n        (users/reset-password username password)\\r\\n        (users/update-users)))\\r\\n   (POST \\"/addReview\\" request \\r\\n        (let [username (get (\:params request) \:username)\\r\\n              beer (get (\:params request) \:beer)\\r\\n              score (get (\:params request) \:score)]\\r\\n        (dbb/insert-new-review username beer score)))\\r\\n   (GET \\"/recommend\\" request \\r\\n       (friend/authorize \#{\:\:users/user} (html/emit* (templates/show-recommendations (\:current (friend/identity request))                                                                              \\r\\n                                                                                      (metrics/recommend (\:current (friend/identity request)))                                                                          \\r\\n                                                                                      (metrics/sort-filter-similar-users (\:current (friend/identity request)))))))\\r\\n  (route/resources \\"/\\")\\r\\n  (friend/logout (ANY \\"/logout\\" request (resp/redirect \\"/login\\")))\\r\\n  (route/not-found \\"<h1>Page not found</h1>\\"))\\r\\n\\r\\n\\r\\n(def app\\r\\n  (-> (handler/site\\r\\n       (friend/authenticate beer-routes\\r\\n       \\t\\t\\t{\:allow-anon? true                                    \\r\\n             \:credential-fn \#(creds/bcrypt-credential-fn @users %)\\r\\n             \:workflows [(workflows/interactive-form)]}))\\r\\n      (session/wrap-session)))" "(ns start\\r\\n  (\:require [views.routing \:as route]\\r\\n            [somnium.congomongo \:as cm]))\\r\\n\\r\\n;;define connection to db beerdb \\r\\n(def connection\\r\\n  (cm/make-connection \\"beerdb\\"\\r\\n                     \:host \\"127.0.0.1\\"\\r\\n                     \:port 27017))\\r\\n\\r\\n;;set connection globally\\r\\n(cm/set-connection\! connection)\\r\\n(cm/set-write-concern connection \:strict)" "(ns clojure-beer.metrics\\r\\n  (\:use [database.clj-dbbeers \:only [get-reviews-by-user get-all-reviews]]))\\r\\n\\r\\n\\r\\n;;count euclidean-distance between two users, taken into account \\r\\n;;overall marks for beers that both users reviewed\\r\\n;;d(p,q)\=n\u2211i\=\u221A1/(pi\u2212qi)2\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\\r\\n;;\\r\\n(defn euclidean-distance [person1 person2]\\r\\n  \\"Get euclidean distance for two specified persons (usernames).\\"\\r\\n  (let [shared-items (filter person1 (keys person2))\\r\\n        score (reduce (fn [score beer]\\r\\n                        (let [score1 (person1 beer)\\r\\n                              score2 (person2 beer)]\\r\\n                          (+ score (Math/pow (- score1 score2) 2))))\\r\\n                      0 shared-items)]\\r\\n    (if (\= (count shared-items) 0)\\r\\n      0\\r\\n      (/ 1 (+ 1 score)))))\\r\\n\\r\\n\\r\\n;;test\\r\\n;;(euclidean-distance (csv/get-reviews-by-user \\"johnmichaelsen\\") (csv/get-reviews-by-user \\"stcules\\"))\\r\\n\\r\\n;;anonymous function with two params, the second is destructured\\r\\n(defn similar-users [person]\\r\\n  (let [person-score (database.clj-dbbeers/get-reviews-by-user person)\\r\\n        data (into {} (database.clj-dbbeers/get-all-reviews 20))]\\r\\n  (reduce (fn[k v]\\r\\n    (let [name (first v)\\r\\n          score (second v)\\r\\n          similarity (euclidean-distance person-score score)]\\r\\n              (assoc k name similarity) )) {} data)))\\r\\n\\r\\n;;return similar users without zero similarity to one supplied, from limited dataset\\r\\n(defn sort-filter-similar-users [person]\\r\\n  (filter \\r\\n   \#(not\= 0 (second %))\\r\\n   (reverse (sort-by second (similar-users person)))))\\r\\n\\r\\n;;test\\r\\n;;(sort-filter-similar-users \\"phishisphunk\\")\\r\\n\\r\\n;;beer recommendations\\r\\n\\r\\n(defn weighted-scores [similarity person]\\r\\n  (let [data (into {} (get-all-reviews 20))]\\r\\n    (reduce \\r\\n     (fn [k v]\\r\\n       (let [other (first v) score (second v)\\r\\n             diff (filter \#(not (contains? (data person) (key %))) (data other))\\r\\n             weighted-score (apply hash-map\\r\\n                                  (interleave (keys diff) \\r\\n                                              (map \#(* % score) (vals diff))))]\\r\\n         (assoc k other weighted-score))) {} similarity)))\\r\\n\\r\\n;;test\\r\\n;;(weighted-scores (sort-filter-similar-users \\"phishisphunk\\") \\"phishisphunk\\")\\r\\n\\r\\n(defn totals [data]\\r\\n  (reduce (fn [k v] (merge-with \#(+ %1 %2) k v)) {} (vals data)))\\r\\n\\r\\n;;(totals (weighted-scores (sort-filter-similar-users \\"phishisphunk\\") \\"phishisphunk\\"))\\r\\n\\r\\n\\r\\n(defn sum-sims [weighted-scores scores similar-users]\\r\\n  (reduce (fn [k v]\\r\\n            (let [beer (first v)\\r\\n                  rated-users (reduce \\r\\n                               (fn [k v] (if (contains? (val v) beer) \\r\\n                                          (conj k (key v)) k)) \\r\\n                               [] weighted-scores)\\r\\n                  similarities (apply + (map \#(similar-users %) rated-users))]\\r\\n              (assoc k beer similarities) ) ) {} scores))\\r\\n\\r\\n(defn recommend [person]\\r\\n  (let [similar-users (into {} (sort-filter-similar-users person))\\r\\n        weighted-scores (weighted-scores similar-users  person)\\r\\n        scores (totals weighted-scores)\\r\\n        sims (sum-sims weighted-scores scores similar-users)]\\r\\n    (apply assoc {} (interleave (keys scores) (map \#(/ (second %) (sims (first %))) scores)))))" "(recommend \\"marko\\")" "(sort-filter-similar-users \\"marko\\")" "(weighted-scores (sort-filter-similar-users \\"marko\\") \\"marko\\")" "(totals {})" "(recommend \\"marko\\")"]
eclipse.preferences.version=1
